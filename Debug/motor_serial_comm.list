
motor_serial_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e1c  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006014  08006014  00007014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800602c  0800602c  00008020  2**0
                  CONTENTS
  4 .ARM          00000008  0800602c  0800602c  0000702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006034  08006034  00008020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006034  08006034  00007034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006038  08006038  00007038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  0800603c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000020  0800605c  00008020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  0800605c  00008388  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8c3  00000000  00000000  0000804e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9a  00000000  00000000  00017911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  000197b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a74  00000000  00000000  0001a4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027717  00000000  00000000  0001af64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd05  00000000  00000000  0004267b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fac56  00000000  00000000  00052380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014cfd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003868  00000000  00000000  0014d01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00150884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000020 	.word	0x20000020
 8000214:	00000000 	.word	0x00000000
 8000218:	08005ffc 	.word	0x08005ffc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000024 	.word	0x20000024
 8000234:	08005ffc 	.word	0x08005ffc

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_UART_RxCpltCallback>:
volatile float pwm_value[4];
volatile float Kp[4];
volatile float Ki[4];
volatile float Kd[4];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a11      	ldr	r2, [pc, #68]	@ (8000578 <HAL_UART_RxCpltCallback+0x50>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d11b      	bne.n	8000570 <HAL_UART_RxCpltCallback+0x48>
        HAL_GPIO_TogglePin(GPIOB, LD3_Pin); // 수신될 때마다 토글
 8000538:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800053c:	480f      	ldr	r0, [pc, #60]	@ (800057c <HAL_UART_RxCpltCallback+0x54>)
 800053e:	f001 fe08 	bl	8002152 <HAL_GPIO_TogglePin>
        if (rx_buf[0] == 0xAA && rx_buf[17] == 0x55) {
 8000542:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <HAL_UART_RxCpltCallback+0x58>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2baa      	cmp	r3, #170	@ 0xaa
 800054a:	d10c      	bne.n	8000566 <HAL_UART_RxCpltCallback+0x3e>
 800054c:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <HAL_UART_RxCpltCallback+0x58>)
 800054e:	7c5b      	ldrb	r3, [r3, #17]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	2b55      	cmp	r3, #85	@ 0x55
 8000554:	d107      	bne.n	8000566 <HAL_UART_RxCpltCallback+0x3e>
                    memcpy(received_vel, &rx_buf[1], sizeof(float) * 4);
 8000556:	2210      	movs	r2, #16
 8000558:	490a      	ldr	r1, [pc, #40]	@ (8000584 <HAL_UART_RxCpltCallback+0x5c>)
 800055a:	480b      	ldr	r0, [pc, #44]	@ (8000588 <HAL_UART_RxCpltCallback+0x60>)
 800055c:	f005 fd40 	bl	8005fe0 <memcpy>
                    data_ready = 1;
 8000560:	4b0a      	ldr	r3, [pc, #40]	@ (800058c <HAL_UART_RxCpltCallback+0x64>)
 8000562:	2201      	movs	r2, #1
 8000564:	601a      	str	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1, rx_buf, 18);
 8000566:	2212      	movs	r2, #18
 8000568:	4905      	ldr	r1, [pc, #20]	@ (8000580 <HAL_UART_RxCpltCallback+0x58>)
 800056a:	4803      	ldr	r0, [pc, #12]	@ (8000578 <HAL_UART_RxCpltCallback+0x50>)
 800056c:	f004 fa72 	bl	8004a54 <HAL_UART_Receive_IT>
    }
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000204 	.word	0x20000204
 800057c:	40020400 	.word	0x40020400
 8000580:	2000028c 	.word	0x2000028c
 8000584:	2000028d 	.word	0x2000028d
 8000588:	200002a0 	.word	0x200002a0
 800058c:	200002b0 	.word	0x200002b0

08000590 <Get_Speed>:
float Get_Speed(float gearratio[], uint8_t PPR[], int i, TIM_HandleTypeDef* htim){
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
 800059c:	603b      	str	r3, [r7, #0]
	enc_cnt[i] = __HAL_TIM_GET_COUNTER(htim);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005a4:	4619      	mov	r1, r3
 80005a6:	4a40      	ldr	r2, [pc, #256]	@ (80006a8 <Get_Speed+0x118>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	enc_dif[i] = enc_cnt[i] - enc_prev[i];
 80005ae:	4a3e      	ldr	r2, [pc, #248]	@ (80006a8 <Get_Speed+0x118>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005b6:	493d      	ldr	r1, [pc, #244]	@ (80006ac <Get_Speed+0x11c>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005be:	1ad2      	subs	r2, r2, r3
 80005c0:	493b      	ldr	r1, [pc, #236]	@ (80006b0 <Get_Speed+0x120>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	enc_prev[i] = enc_cnt[i];
 80005c8:	4a37      	ldr	r2, [pc, #220]	@ (80006a8 <Get_Speed+0x118>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005d0:	4936      	ldr	r1, [pc, #216]	@ (80006ac <Get_Speed+0x11c>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // over, underflow 보정
    if (enc_dif[i] > 32767) enc_dif[i] -= 65536;
 80005d8:	4a35      	ldr	r2, [pc, #212]	@ (80006b0 <Get_Speed+0x120>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005e4:	db0a      	blt.n	80005fc <Get_Speed+0x6c>
 80005e6:	4a32      	ldr	r2, [pc, #200]	@ (80006b0 <Get_Speed+0x120>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ee:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 80005f2:	492f      	ldr	r1, [pc, #188]	@ (80006b0 <Get_Speed+0x120>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80005fa:	e010      	b.n	800061e <Get_Speed+0x8e>
    else if (enc_dif[i] < -32767) enc_dif[i] += 65536;
 80005fc:	4a2c      	ldr	r2, [pc, #176]	@ (80006b0 <Get_Speed+0x120>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000604:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8000608:	dc09      	bgt.n	800061e <Get_Speed+0x8e>
 800060a:	4a29      	ldr	r2, [pc, #164]	@ (80006b0 <Get_Speed+0x120>)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000612:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8000616:	4926      	ldr	r1, [pc, #152]	@ (80006b0 <Get_Speed+0x120>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    current_vel[i] = (float)enc_dif[i] * (2 * pi) / (4 * PPR[i] * gearratio[i] * dt);
 800061e:	4a24      	ldr	r2, [pc, #144]	@ (80006b0 <Get_Speed+0x120>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000626:	ee07 3a90 	vmov	s15, r3
 800062a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800062e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000632:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8000698 <Get_Speed+0x108>
 8000636:	ee27 5b06 	vmul.f64	d5, d7, d6
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	68ba      	ldr	r2, [r7, #8]
 800063e:	4413      	add	r3, r2
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	ee07 3a90 	vmov	s15, r3
 8000648:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	4413      	add	r3, r2
 8000654:	edd3 7a00 	vldr	s15, [r3]
 8000658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800065c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000660:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 80006a0 <Get_Speed+0x110>
 8000664:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000668:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800066c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000670:	4a10      	ldr	r2, [pc, #64]	@ (80006b4 <Get_Speed+0x124>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	4413      	add	r3, r2
 8000678:	edc3 7a00 	vstr	s15, [r3]

    return current_vel[i];
 800067c:	4a0d      	ldr	r2, [pc, #52]	@ (80006b4 <Get_Speed+0x124>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4413      	add	r3, r2
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	ee07 3a90 	vmov	s15, r3
}
 800068a:	eeb0 0a67 	vmov.f32	s0, s15
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	54411744 	.word	0x54411744
 800069c:	401921fb 	.word	0x401921fb
 80006a0:	47ae147b 	.word	0x47ae147b
 80006a4:	3f847ae1 	.word	0x3f847ae1
 80006a8:	200002b4 	.word	0x200002b4
 80006ac:	200002c4 	.word	0x200002c4
 80006b0:	200002d4 	.word	0x200002d4
 80006b4:	20000304 	.word	0x20000304

080006b8 <LPF_Speed>:
float LPF_Speed(float current_vel[], int i){
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
	float alpha = 0.1f;  // 필터 계수 (0.0 ~ 1.0)
 80006c2:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <LPF_Speed+0x6c>)
 80006c4:	60fb      	str	r3, [r7, #12]

	filtered_vel[i] = alpha * current_vel[i] + (1.0f - alpha) * filtered_vel[i];
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	ed93 7a00 	vldr	s14, [r3]
 80006d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80006d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80006de:	edd7 7a03 	vldr	s15, [r7, #12]
 80006e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80006e6:	4a10      	ldr	r2, [pc, #64]	@ (8000728 <LPF_Speed+0x70>)
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4413      	add	r3, r2
 80006ee:	edd3 7a00 	vldr	s15, [r3]
 80006f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000728 <LPF_Speed+0x70>)
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	edc3 7a00 	vstr	s15, [r3]
	return filtered_vel[i];
 8000706:	4a08      	ldr	r2, [pc, #32]	@ (8000728 <LPF_Speed+0x70>)
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4413      	add	r3, r2
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	ee07 3a90 	vmov	s15, r3
}
 8000714:	eeb0 0a67 	vmov.f32	s0, s15
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	3dcccccd 	.word	0x3dcccccd
 8000728:	20000314 	.word	0x20000314
 800072c:	00000000 	.word	0x00000000

08000730 <PID_control>:
void PID_control(int i){
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	error[i] = received_vel[i] - filtered_vel[i]; // 오차 = 목표 - 현재
 8000738:	4a5f      	ldr	r2, [pc, #380]	@ (80008b8 <PID_control+0x188>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	ed93 7a00 	vldr	s14, [r3]
 8000744:	4a5d      	ldr	r2, [pc, #372]	@ (80008bc <PID_control+0x18c>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4413      	add	r3, r2
 800074c:	edd3 7a00 	vldr	s15, [r3]
 8000750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000754:	4a5a      	ldr	r2, [pc, #360]	@ (80008c0 <PID_control+0x190>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4413      	add	r3, r2
 800075c:	edc3 7a00 	vstr	s15, [r3]

	integral[i] += error[i] * dt; // 적분 = 누적오차 * 시간
 8000760:	4a57      	ldr	r2, [pc, #348]	@ (80008c0 <PID_control+0x190>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	4413      	add	r3, r2
 8000768:	edd3 7a00 	vldr	s15, [r3]
 800076c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000770:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 80008b0 <PID_control+0x180>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	4a52      	ldr	r2, [pc, #328]	@ (80008c4 <PID_control+0x194>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	edd3 7a00 	vldr	s15, [r3]
 8000784:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000788:	ee36 7b07 	vadd.f64	d7, d6, d7
 800078c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000790:	4a4c      	ldr	r2, [pc, #304]	@ (80008c4 <PID_control+0x194>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4413      	add	r3, r2
 8000798:	edc3 7a00 	vstr	s15, [r3]
	  // PWM 값 제한 (0 ~ 1000)
	if (integral[i] > 1000) integral[i] = 1000;
 800079c:	4a49      	ldr	r2, [pc, #292]	@ (80008c4 <PID_control+0x194>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	edd3 7a00 	vldr	s15, [r3]
 80007a8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80008c8 <PID_control+0x198>
 80007ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007b4:	dd06      	ble.n	80007c4 <PID_control+0x94>
 80007b6:	4a43      	ldr	r2, [pc, #268]	@ (80008c4 <PID_control+0x194>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	4a43      	ldr	r2, [pc, #268]	@ (80008cc <PID_control+0x19c>)
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	e012      	b.n	80007ea <PID_control+0xba>
	else if (integral[i] < -1000) integral[i] = -1000;
 80007c4:	4a3f      	ldr	r2, [pc, #252]	@ (80008c4 <PID_control+0x194>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	edd3 7a00 	vldr	s15, [r3]
 80007d0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80008d0 <PID_control+0x1a0>
 80007d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007dc:	d505      	bpl.n	80007ea <PID_control+0xba>
 80007de:	4a39      	ldr	r2, [pc, #228]	@ (80008c4 <PID_control+0x194>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	4a3b      	ldr	r2, [pc, #236]	@ (80008d4 <PID_control+0x1a4>)
 80007e8:	601a      	str	r2, [r3, #0]

	derivative[i] = (error[i] - prev_error[i]) / dt; // 미분 = (오차-이전오차)/시간
 80007ea:	4a35      	ldr	r2, [pc, #212]	@ (80008c0 <PID_control+0x190>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	ed93 7a00 	vldr	s14, [r3]
 80007f6:	4a38      	ldr	r2, [pc, #224]	@ (80008d8 <PID_control+0x1a8>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	edd3 7a00 	vldr	s15, [r3]
 8000802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000806:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800080a:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 80008b0 <PID_control+0x180>
 800080e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000812:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000816:	4a31      	ldr	r2, [pc, #196]	@ (80008dc <PID_control+0x1ac>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	4413      	add	r3, r2
 800081e:	edc3 7a00 	vstr	s15, [r3]
	pwm_value[i] = (Kp[i] * error[i]) + (Ki[i] * integral[i]) + (Kd[i] * derivative[i]); // PID
 8000822:	4a2f      	ldr	r2, [pc, #188]	@ (80008e0 <PID_control+0x1b0>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	ed93 7a00 	vldr	s14, [r3]
 800082e:	4a24      	ldr	r2, [pc, #144]	@ (80008c0 <PID_control+0x190>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	4413      	add	r3, r2
 8000836:	edd3 7a00 	vldr	s15, [r3]
 800083a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800083e:	4a29      	ldr	r2, [pc, #164]	@ (80008e4 <PID_control+0x1b4>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4413      	add	r3, r2
 8000846:	edd3 6a00 	vldr	s13, [r3]
 800084a:	4a1e      	ldr	r2, [pc, #120]	@ (80008c4 <PID_control+0x194>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	4413      	add	r3, r2
 8000852:	edd3 7a00 	vldr	s15, [r3]
 8000856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800085a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800085e:	4a22      	ldr	r2, [pc, #136]	@ (80008e8 <PID_control+0x1b8>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4413      	add	r3, r2
 8000866:	edd3 6a00 	vldr	s13, [r3]
 800086a:	4a1c      	ldr	r2, [pc, #112]	@ (80008dc <PID_control+0x1ac>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4413      	add	r3, r2
 8000872:	edd3 7a00 	vldr	s15, [r3]
 8000876:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800087a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800087e:	4a1b      	ldr	r2, [pc, #108]	@ (80008ec <PID_control+0x1bc>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	edc3 7a00 	vstr	s15, [r3]
	prev_error[i] = error[i]; // 현재 오차 값을 이전 값으로 저장 -> 다음 루프에서 사용
 800088a:	4a0d      	ldr	r2, [pc, #52]	@ (80008c0 <PID_control+0x190>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4910      	ldr	r1, [pc, #64]	@ (80008d8 <PID_control+0x1a8>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	440b      	add	r3, r1
 800089c:	601a      	str	r2, [r3, #0]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	f3af 8000 	nop.w
 80008b0:	47ae147b 	.word	0x47ae147b
 80008b4:	3f847ae1 	.word	0x3f847ae1
 80008b8:	200002a0 	.word	0x200002a0
 80008bc:	20000314 	.word	0x20000314
 80008c0:	200002e4 	.word	0x200002e4
 80008c4:	20000324 	.word	0x20000324
 80008c8:	447a0000 	.word	0x447a0000
 80008cc:	447a0000 	.word	0x447a0000
 80008d0:	c47a0000 	.word	0xc47a0000
 80008d4:	c47a0000 	.word	0xc47a0000
 80008d8:	200002f4 	.word	0x200002f4
 80008dc:	20000334 	.word	0x20000334
 80008e0:	20000354 	.word	0x20000354
 80008e4:	20000364 	.word	0x20000364
 80008e8:	20000374 	.word	0x20000374
 80008ec:	20000344 	.word	0x20000344

080008f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
    if (htim == &htim6 && data_ready)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a79      	ldr	r2, [pc, #484]	@ (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	f040 80ea 	bne.w	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x1e6>
 8000902:	4b78      	ldr	r3, [pc, #480]	@ (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	f000 80e5 	beq.w	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x1e6>
    {
        data_ready = 0;  // 플래그 리셋
 800090c:	4b75      	ldr	r3, [pc, #468]	@ (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]

		for (int i = 0; i < 4; i++)
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	e0da      	b.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x1de>
        {
			switch (i) {
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2b03      	cmp	r3, #3
 800091c:	d826      	bhi.n	800096c <HAL_TIM_PeriodElapsedCallback+0x7c>
 800091e:	a201      	add	r2, pc, #4	@ (adr r2, 8000924 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000924:	08000935 	.word	0x08000935
 8000928:	08000943 	.word	0x08000943
 800092c:	08000951 	.word	0x08000951
 8000930:	0800095f 	.word	0x0800095f
				case 0: Get_Speed(gearratio, PPR, i, &htim2); break;
 8000934:	4b6c      	ldr	r3, [pc, #432]	@ (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	496c      	ldr	r1, [pc, #432]	@ (8000aec <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800093a:	486d      	ldr	r0, [pc, #436]	@ (8000af0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800093c:	f7ff fe28 	bl	8000590 <Get_Speed>
 8000940:	e014      	b.n	800096c <HAL_TIM_PeriodElapsedCallback+0x7c>
				case 1: Get_Speed(gearratio, PPR, i, &htim3); break;
 8000942:	4b6c      	ldr	r3, [pc, #432]	@ (8000af4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	4969      	ldr	r1, [pc, #420]	@ (8000aec <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000948:	4869      	ldr	r0, [pc, #420]	@ (8000af0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800094a:	f7ff fe21 	bl	8000590 <Get_Speed>
 800094e:	e00d      	b.n	800096c <HAL_TIM_PeriodElapsedCallback+0x7c>
				case 2: Get_Speed(gearratio, PPR, i, &htim4); break;
 8000950:	4b69      	ldr	r3, [pc, #420]	@ (8000af8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	4965      	ldr	r1, [pc, #404]	@ (8000aec <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000956:	4866      	ldr	r0, [pc, #408]	@ (8000af0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000958:	f7ff fe1a 	bl	8000590 <Get_Speed>
 800095c:	e006      	b.n	800096c <HAL_TIM_PeriodElapsedCallback+0x7c>
				case 3: Get_Speed(gearratio, PPR, i, &htim8); break;
 800095e:	4b67      	ldr	r3, [pc, #412]	@ (8000afc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	4962      	ldr	r1, [pc, #392]	@ (8000aec <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000964:	4862      	ldr	r0, [pc, #392]	@ (8000af0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000966:	f7ff fe13 	bl	8000590 <Get_Speed>
 800096a:	bf00      	nop
			}
			LPF_Speed(current_vel, i);
 800096c:	68f9      	ldr	r1, [r7, #12]
 800096e:	4864      	ldr	r0, [pc, #400]	@ (8000b00 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000970:	f7ff fea2 	bl	80006b8 <LPF_Speed>
			PID_control(i);
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f7ff fedb 	bl	8000730 <PID_control>

			float pwm = fabsf(pwm_value[i]);
 800097a:	4a62      	ldr	r2, [pc, #392]	@ (8000b04 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4413      	add	r3, r2
 8000982:	edd3 7a00 	vldr	s15, [r3]
 8000986:	eef0 7ae7 	vabs.f32	s15, s15
 800098a:	edc7 7a02 	vstr	s15, [r7, #8]
			if (pwm > 1000) pwm = 1000;
 800098e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000992:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8000b08 <HAL_TIM_PeriodElapsedCallback+0x218>
 8000996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800099a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099e:	dd01      	ble.n	80009a4 <HAL_TIM_PeriodElapsedCallback+0xb4>
 80009a0:	4b5a      	ldr	r3, [pc, #360]	@ (8000b0c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80009a2:	60bb      	str	r3, [r7, #8]

			switch (i) {
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	f200 808e 	bhi.w	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 80009ac:	a201      	add	r2, pc, #4	@ (adr r2, 80009b4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80009ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b2:	bf00      	nop
 80009b4:	080009c5 	.word	0x080009c5
 80009b8:	08000a05 	.word	0x08000a05
 80009bc:	08000a45 	.word	0x08000a45
 80009c0:	08000a85 	.word	0x08000a85
				case 0:
					if (pwm_value[i] >= 0) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80009c4:	4a4f      	ldr	r2, [pc, #316]	@ (8000b04 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	4413      	add	r3, r2
 80009cc:	edd3 7a00 	vldr	s15, [r3]
 80009d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d8:	db05      	blt.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0xf6>
 80009da:	2201      	movs	r2, #1
 80009dc:	2101      	movs	r1, #1
 80009de:	484c      	ldr	r0, [pc, #304]	@ (8000b10 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80009e0:	f001 fb9e 	bl	8002120 <HAL_GPIO_WritePin>
 80009e4:	e004      	b.n	80009f0 <HAL_TIM_PeriodElapsedCallback+0x100>
					else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2101      	movs	r1, #1
 80009ea:	4849      	ldr	r0, [pc, #292]	@ (8000b10 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80009ec:	f001 fb98 	bl	8002120 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);
 80009f0:	4b48      	ldr	r3, [pc, #288]	@ (8000b14 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80009f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009fc:	ee17 2a90 	vmov	r2, s15
 8000a00:	635a      	str	r2, [r3, #52]	@ 0x34
					break;
 8000a02:	e061      	b.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x1d8>
				case 1:
					if (pwm_value[i] >= 0) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000a04:	4a3f      	ldr	r2, [pc, #252]	@ (8000b04 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	edd3 7a00 	vldr	s15, [r3]
 8000a10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a18:	db05      	blt.n	8000a26 <HAL_TIM_PeriodElapsedCallback+0x136>
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	483c      	ldr	r0, [pc, #240]	@ (8000b10 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000a20:	f001 fb7e 	bl	8002120 <HAL_GPIO_WritePin>
 8000a24:	e004      	b.n	8000a30 <HAL_TIM_PeriodElapsedCallback+0x140>
					else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2104      	movs	r1, #4
 8000a2a:	4839      	ldr	r0, [pc, #228]	@ (8000b10 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000a2c:	f001 fb78 	bl	8002120 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
 8000a30:	4b38      	ldr	r3, [pc, #224]	@ (8000b14 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a3c:	ee17 2a90 	vmov	r2, s15
 8000a40:	639a      	str	r2, [r3, #56]	@ 0x38
					break;
 8000a42:	e041      	b.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x1d8>
				case 2:
					if (pwm_value[i] >= 0) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8000a44:	4a2f      	ldr	r2, [pc, #188]	@ (8000b04 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	edd3 7a00 	vldr	s15, [r3]
 8000a50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a58:	db05      	blt.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x176>
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	482e      	ldr	r0, [pc, #184]	@ (8000b18 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000a60:	f001 fb5e 	bl	8002120 <HAL_GPIO_WritePin>
 8000a64:	e004      	b.n	8000a70 <HAL_TIM_PeriodElapsedCallback+0x180>
					else HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2120      	movs	r1, #32
 8000a6a:	482b      	ldr	r0, [pc, #172]	@ (8000b18 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000a6c:	f001 fb58 	bl	8002120 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm);
 8000a70:	4b28      	ldr	r3, [pc, #160]	@ (8000b14 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a7c:	ee17 2a90 	vmov	r2, s15
 8000a80:	63da      	str	r2, [r3, #60]	@ 0x3c
					break;
 8000a82:	e021      	b.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x1d8>
				case 3:
					if (pwm_value[i] >= 0) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000a84:	4a1f      	ldr	r2, [pc, #124]	@ (8000b04 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	4413      	add	r3, r2
 8000a8c:	edd3 7a00 	vldr	s15, [r3]
 8000a90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a98:	db06      	blt.n	8000aa8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aa0:	481e      	ldr	r0, [pc, #120]	@ (8000b1c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000aa2:	f001 fb3d 	bl	8002120 <HAL_GPIO_WritePin>
 8000aa6:	e005      	b.n	8000ab4 <HAL_TIM_PeriodElapsedCallback+0x1c4>
					else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aae:	481b      	ldr	r0, [pc, #108]	@ (8000b1c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000ab0:	f001 fb36 	bl	8002120 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm);
 8000ab4:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ac0:	ee17 2a90 	vmov	r2, s15
 8000ac4:	641a      	str	r2, [r3, #64]	@ 0x40
					break;
 8000ac6:	bf00      	nop
		for (int i = 0; i < 4; i++)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	3301      	adds	r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	f77f af21 	ble.w	8000918 <HAL_TIM_PeriodElapsedCallback+0x28>
			}
        }
    }
}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000016c 	.word	0x2000016c
 8000ae4:	200002b0 	.word	0x200002b0
 8000ae8:	20000088 	.word	0x20000088
 8000aec:	20000010 	.word	0x20000010
 8000af0:	20000000 	.word	0x20000000
 8000af4:	200000d4 	.word	0x200000d4
 8000af8:	20000120 	.word	0x20000120
 8000afc:	200001b8 	.word	0x200001b8
 8000b00:	20000304 	.word	0x20000304
 8000b04:	20000344 	.word	0x20000344
 8000b08:	447a0000 	.word	0x447a0000
 8000b0c:	447a0000 	.word	0x447a0000
 8000b10:	40020400 	.word	0x40020400
 8000b14:	2000003c 	.word	0x2000003c
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40020800 	.word	0x40020800

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b24:	f000 fc16 	bl	8001354 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b28:	f000 fed5 	bl	80018d6 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2c:	f000 f896 	bl	8000c5c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b30:	f000 fb80 	bl	8001234 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b34:	f000 f8ee 	bl	8000d14 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b38:	f000 f9bc 	bl	8000eb4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b3c:	f000 fa0e 	bl	8000f5c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b40:	f000 fa62 	bl	8001008 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000b44:	f000 fab6 	bl	80010b4 <MX_TIM6_Init>
  MX_TIM8_Init();
 8000b48:	f000 faea 	bl	8001120 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000b4c:	f000 fb42 	bl	80011d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
    HAL_UART_Receive_IT(&huart1, rx_buf, 18); // 최초 수신 시작
 8000b50:	2212      	movs	r2, #18
 8000b52:	4936      	ldr	r1, [pc, #216]	@ (8000c2c <main+0x10c>)
 8000b54:	4836      	ldr	r0, [pc, #216]	@ (8000c30 <main+0x110>)
 8000b56:	f003 ff7d 	bl	8004a54 <HAL_UART_Receive_IT>

    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000b5a:	213c      	movs	r1, #60	@ 0x3c
 8000b5c:	4835      	ldr	r0, [pc, #212]	@ (8000c34 <main+0x114>)
 8000b5e:	f002 fea1 	bl	80038a4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000b62:	213c      	movs	r1, #60	@ 0x3c
 8000b64:	4834      	ldr	r0, [pc, #208]	@ (8000c38 <main+0x118>)
 8000b66:	f002 fe9d 	bl	80038a4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000b6a:	213c      	movs	r1, #60	@ 0x3c
 8000b6c:	4833      	ldr	r0, [pc, #204]	@ (8000c3c <main+0x11c>)
 8000b6e:	f002 fe99 	bl	80038a4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000b72:	213c      	movs	r1, #60	@ 0x3c
 8000b74:	4832      	ldr	r0, [pc, #200]	@ (8000c40 <main+0x120>)
 8000b76:	f002 fe95 	bl	80038a4 <HAL_TIM_Encoder_Start>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4831      	ldr	r0, [pc, #196]	@ (8000c44 <main+0x124>)
 8000b7e:	f002 fcf1 	bl	8003564 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b82:	2104      	movs	r1, #4
 8000b84:	482f      	ldr	r0, [pc, #188]	@ (8000c44 <main+0x124>)
 8000b86:	f002 fced 	bl	8003564 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000b8a:	2108      	movs	r1, #8
 8000b8c:	482d      	ldr	r0, [pc, #180]	@ (8000c44 <main+0x124>)
 8000b8e:	f002 fce9 	bl	8003564 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000b92:	210c      	movs	r1, #12
 8000b94:	482b      	ldr	r0, [pc, #172]	@ (8000c44 <main+0x124>)
 8000b96:	f002 fce5 	bl	8003564 <HAL_TIM_PWM_Start>

    HAL_TIM_Base_Start_IT(&htim6);
 8000b9a:	482b      	ldr	r0, [pc, #172]	@ (8000c48 <main+0x128>)
 8000b9c:	f002 fc08 	bl	80033b0 <HAL_TIM_Base_Start_IT>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4829      	ldr	r0, [pc, #164]	@ (8000c4c <main+0x12c>)
 8000ba6:	f001 fabb 	bl	8002120 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2102      	movs	r1, #2
 8000bae:	4827      	ldr	r0, [pc, #156]	@ (8000c4c <main+0x12c>)
 8000bb0:	f001 fab6 	bl	8002120 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	4824      	ldr	r0, [pc, #144]	@ (8000c4c <main+0x12c>)
 8000bba:	f001 fab1 	bl	8002120 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bc4:	4821      	ldr	r0, [pc, #132]	@ (8000c4c <main+0x12c>)
 8000bc6:	f001 faab 	bl	8002120 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2120      	movs	r1, #32
 8000bce:	4820      	ldr	r0, [pc, #128]	@ (8000c50 <main+0x130>)
 8000bd0:	f001 faa6 	bl	8002120 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2140      	movs	r1, #64	@ 0x40
 8000bd8:	481d      	ldr	r0, [pc, #116]	@ (8000c50 <main+0x130>)
 8000bda:	f001 faa1 	bl	8002120 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000be4:	481b      	ldr	r0, [pc, #108]	@ (8000c54 <main+0x134>)
 8000be6:	f001 fa9b 	bl	8002120 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bf0:	4818      	ldr	r0, [pc, #96]	@ (8000c54 <main+0x134>)
 8000bf2:	f001 fa95 	bl	8002120 <HAL_GPIO_WritePin>

    enc_prev[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <main+0x114>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b16      	ldr	r3, [pc, #88]	@ (8000c58 <main+0x138>)
 8000c00:	601a      	str	r2, [r3, #0]
    enc_prev[1] = __HAL_TIM_GET_COUNTER(&htim3);
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <main+0x118>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <main+0x138>)
 8000c0c:	605a      	str	r2, [r3, #4]
    enc_prev[2] = __HAL_TIM_GET_COUNTER(&htim4);
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <main+0x11c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <main+0x138>)
 8000c18:	609a      	str	r2, [r3, #8]
    enc_prev[3] = __HAL_TIM_GET_COUNTER(&htim8);
 8000c1a:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <main+0x120>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <main+0x138>)
 8000c24:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8000c26:	bf00      	nop
 8000c28:	e7fd      	b.n	8000c26 <main+0x106>
 8000c2a:	bf00      	nop
 8000c2c:	2000028c 	.word	0x2000028c
 8000c30:	20000204 	.word	0x20000204
 8000c34:	20000088 	.word	0x20000088
 8000c38:	200000d4 	.word	0x200000d4
 8000c3c:	20000120 	.word	0x20000120
 8000c40:	200001b8 	.word	0x200001b8
 8000c44:	2000003c 	.word	0x2000003c
 8000c48:	2000016c 	.word	0x2000016c
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40020800 	.word	0x40020800
 8000c58:	200002c4 	.word	0x200002c4

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b094      	sub	sp, #80	@ 0x50
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	2234      	movs	r2, #52	@ 0x34
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f005 f98c 	bl	8005f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	4b22      	ldr	r3, [pc, #136]	@ (8000d0c <SystemClock_Config+0xb0>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c84:	4a21      	ldr	r2, [pc, #132]	@ (8000d0c <SystemClock_Config+0xb0>)
 8000c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d0c <SystemClock_Config+0xb0>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c98:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <SystemClock_Config+0xb4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d10 <SystemClock_Config+0xb4>)
 8000ca2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <SystemClock_Config+0xb4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 fa5d 	bl	8002188 <HAL_RCC_OscConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000cd4:	f000 fb6a 	bl	80013ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd8:	230f      	movs	r3, #15
 8000cda:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 fcf6 	bl	80026e4 <HAL_RCC_ClockConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cfe:	f000 fb55 	bl	80013ac <Error_Handler>
  }
}
 8000d02:	bf00      	nop
 8000d04:	3750      	adds	r7, #80	@ 0x50
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40007000 	.word	0x40007000

08000d14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b09a      	sub	sp, #104	@ 0x68
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
 8000d44:	615a      	str	r2, [r3, #20]
 8000d46:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	222c      	movs	r2, #44	@ 0x2c
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f005 f91a 	bl	8005f88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d54:	4b55      	ldr	r3, [pc, #340]	@ (8000eac <MX_TIM1_Init+0x198>)
 8000d56:	4a56      	ldr	r2, [pc, #344]	@ (8000eb0 <MX_TIM1_Init+0x19c>)
 8000d58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000d5a:	4b54      	ldr	r3, [pc, #336]	@ (8000eac <MX_TIM1_Init+0x198>)
 8000d5c:	225f      	movs	r2, #95	@ 0x5f
 8000d5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b52      	ldr	r3, [pc, #328]	@ (8000eac <MX_TIM1_Init+0x198>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 8000d66:	4b51      	ldr	r3, [pc, #324]	@ (8000eac <MX_TIM1_Init+0x198>)
 8000d68:	2231      	movs	r2, #49	@ 0x31
 8000d6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	4b4f      	ldr	r3, [pc, #316]	@ (8000eac <MX_TIM1_Init+0x198>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d72:	4b4e      	ldr	r3, [pc, #312]	@ (8000eac <MX_TIM1_Init+0x198>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d78:	4b4c      	ldr	r3, [pc, #304]	@ (8000eac <MX_TIM1_Init+0x198>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d7e:	484b      	ldr	r0, [pc, #300]	@ (8000eac <MX_TIM1_Init+0x198>)
 8000d80:	f002 fabe 	bl	8003300 <HAL_TIM_Base_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d8a:	f000 fb0f 	bl	80013ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d92:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d94:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4844      	ldr	r0, [pc, #272]	@ (8000eac <MX_TIM1_Init+0x198>)
 8000d9c:	f003 f82c 	bl	8003df8 <HAL_TIM_ConfigClockSource>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000da6:	f000 fb01 	bl	80013ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000daa:	4840      	ldr	r0, [pc, #256]	@ (8000eac <MX_TIM1_Init+0x198>)
 8000dac:	f002 fb78 	bl	80034a0 <HAL_TIM_PWM_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000db6:	f000 faf9 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dc6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4837      	ldr	r0, [pc, #220]	@ (8000eac <MX_TIM1_Init+0x198>)
 8000dce:	f003 fcc9 	bl	8004764 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000dd8:	f000 fae8 	bl	80013ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ddc:	2360      	movs	r3, #96	@ 0x60
 8000dde:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de4:	2300      	movs	r3, #0
 8000de6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000de8:	2300      	movs	r3, #0
 8000dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000df0:	2300      	movs	r3, #0
 8000df2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000df4:	2300      	movs	r3, #0
 8000df6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4619      	mov	r1, r3
 8000e00:	482a      	ldr	r0, [pc, #168]	@ (8000eac <MX_TIM1_Init+0x198>)
 8000e02:	f002 fee5 	bl	8003bd0 <HAL_TIM_PWM_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000e0c:	f000 face 	bl	80013ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e10:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e14:	2204      	movs	r2, #4
 8000e16:	4619      	mov	r1, r3
 8000e18:	4824      	ldr	r0, [pc, #144]	@ (8000eac <MX_TIM1_Init+0x198>)
 8000e1a:	f002 fed9 	bl	8003bd0 <HAL_TIM_PWM_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000e24:	f000 fac2 	bl	80013ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	4619      	mov	r1, r3
 8000e30:	481e      	ldr	r0, [pc, #120]	@ (8000eac <MX_TIM1_Init+0x198>)
 8000e32:	f002 fecd 	bl	8003bd0 <HAL_TIM_PWM_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000e3c:	f000 fab6 	bl	80013ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e44:	220c      	movs	r2, #12
 8000e46:	4619      	mov	r1, r3
 8000e48:	4818      	ldr	r0, [pc, #96]	@ (8000eac <MX_TIM1_Init+0x198>)
 8000e4a:	f002 fec1 	bl	8003bd0 <HAL_TIM_PWM_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000e54:	f000 faaa 	bl	80013ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4807      	ldr	r0, [pc, #28]	@ (8000eac <MX_TIM1_Init+0x198>)
 8000e8e:	f003 fcf7 	bl	8004880 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000e98:	f000 fa88 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e9c:	4803      	ldr	r0, [pc, #12]	@ (8000eac <MX_TIM1_Init+0x198>)
 8000e9e:	f000 fbdd 	bl	800165c <HAL_TIM_MspPostInit>

}
 8000ea2:	bf00      	nop
 8000ea4:	3768      	adds	r7, #104	@ 0x68
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000003c 	.word	0x2000003c
 8000eb0:	40010000 	.word	0x40010000

08000eb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08c      	sub	sp, #48	@ 0x30
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	2224      	movs	r2, #36	@ 0x24
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f005 f860 	bl	8005f88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	463b      	mov	r3, r7
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ed2:	4b21      	ldr	r3, [pc, #132]	@ (8000f58 <MX_TIM2_Init+0xa4>)
 8000ed4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ed8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000eda:	4b1f      	ldr	r3, [pc, #124]	@ (8000f58 <MX_TIM2_Init+0xa4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <MX_TIM2_Init+0xa4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f58 <MX_TIM2_Init+0xa4>)
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000eec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <MX_TIM2_Init+0xa4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <MX_TIM2_Init+0xa4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000efa:	2301      	movs	r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f02:	2301      	movs	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f12:	2301      	movs	r3, #1
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	4619      	mov	r1, r3
 8000f24:	480c      	ldr	r0, [pc, #48]	@ (8000f58 <MX_TIM2_Init+0xa4>)
 8000f26:	f002 fc17 	bl	8003758 <HAL_TIM_Encoder_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000f30:	f000 fa3c 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f34:	2300      	movs	r3, #0
 8000f36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	@ (8000f58 <MX_TIM2_Init+0xa4>)
 8000f42:	f003 fc0f 	bl	8004764 <HAL_TIMEx_MasterConfigSynchronization>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000f4c:	f000 fa2e 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	3730      	adds	r7, #48	@ 0x30
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000088 	.word	0x20000088

08000f5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	@ 0x30
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	2224      	movs	r2, #36	@ 0x24
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f005 f80c 	bl	8005f88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f70:	463b      	mov	r3, r7
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f7a:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <MX_TIM3_Init+0xa4>)
 8000f7c:	4a21      	ldr	r2, [pc, #132]	@ (8001004 <MX_TIM3_Init+0xa8>)
 8000f7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <MX_TIM3_Init+0xa4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <MX_TIM3_Init+0xa4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <MX_TIM3_Init+0xa4>)
 8000f8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <MX_TIM3_Init+0xa4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9a:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <MX_TIM3_Init+0xa4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480d      	ldr	r0, [pc, #52]	@ (8001000 <MX_TIM3_Init+0xa4>)
 8000fcc:	f002 fbc4 	bl	8003758 <HAL_TIM_Encoder_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000fd6:	f000 f9e9 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4806      	ldr	r0, [pc, #24]	@ (8001000 <MX_TIM3_Init+0xa4>)
 8000fe8:	f003 fbbc 	bl	8004764 <HAL_TIMEx_MasterConfigSynchronization>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000ff2:	f000 f9db 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	3730      	adds	r7, #48	@ 0x30
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000d4 	.word	0x200000d4
 8001004:	40000400 	.word	0x40000400

08001008 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08c      	sub	sp, #48	@ 0x30
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	2224      	movs	r2, #36	@ 0x24
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f004 ffb6 	bl	8005f88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800101c:	463b      	mov	r3, r7
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001026:	4b21      	ldr	r3, [pc, #132]	@ (80010ac <MX_TIM4_Init+0xa4>)
 8001028:	4a21      	ldr	r2, [pc, #132]	@ (80010b0 <MX_TIM4_Init+0xa8>)
 800102a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800102c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <MX_TIM4_Init+0xa4>)
 800102e:	2200      	movs	r2, #0
 8001030:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001032:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <MX_TIM4_Init+0xa4>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001038:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <MX_TIM4_Init+0xa4>)
 800103a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800103e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <MX_TIM4_Init+0xa4>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <MX_TIM4_Init+0xa4>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800104c:	2301      	movs	r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001054:	2301      	movs	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001064:	2301      	movs	r3, #1
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	4619      	mov	r1, r3
 8001076:	480d      	ldr	r0, [pc, #52]	@ (80010ac <MX_TIM4_Init+0xa4>)
 8001078:	f002 fb6e 	bl	8003758 <HAL_TIM_Encoder_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001082:	f000 f993 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800108e:	463b      	mov	r3, r7
 8001090:	4619      	mov	r1, r3
 8001092:	4806      	ldr	r0, [pc, #24]	@ (80010ac <MX_TIM4_Init+0xa4>)
 8001094:	f003 fb66 	bl	8004764 <HAL_TIMEx_MasterConfigSynchronization>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800109e:	f000 f985 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	3730      	adds	r7, #48	@ 0x30
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000120 	.word	0x20000120
 80010b0:	40000800 	.word	0x40000800

080010b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_TIM6_Init+0x64>)
 80010c6:	4a15      	ldr	r2, [pc, #84]	@ (800111c <MX_TIM6_Init+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <MX_TIM6_Init+0x64>)
 80010cc:	f242 527f 	movw	r2, #9599	@ 0x257f
 80010d0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_TIM6_Init+0x64>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_TIM6_Init+0x64>)
 80010da:	2263      	movs	r2, #99	@ 0x63
 80010dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010de:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <MX_TIM6_Init+0x64>)
 80010e0:	2280      	movs	r2, #128	@ 0x80
 80010e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010e4:	480c      	ldr	r0, [pc, #48]	@ (8001118 <MX_TIM6_Init+0x64>)
 80010e6:	f002 f90b 	bl	8003300 <HAL_TIM_Base_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80010f0:	f000 f95c 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_TIM6_Init+0x64>)
 8001102:	f003 fb2f 	bl	8004764 <HAL_TIMEx_MasterConfigSynchronization>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800110c:	f000 f94e 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000016c 	.word	0x2000016c
 800111c:	40001000 	.word	0x40001000

08001120 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	@ 0x30
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2224      	movs	r2, #36	@ 0x24
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f004 ff2a 	bl	8005f88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800113e:	4b23      	ldr	r3, [pc, #140]	@ (80011cc <MX_TIM8_Init+0xac>)
 8001140:	4a23      	ldr	r2, [pc, #140]	@ (80011d0 <MX_TIM8_Init+0xb0>)
 8001142:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001144:	4b21      	ldr	r3, [pc, #132]	@ (80011cc <MX_TIM8_Init+0xac>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114a:	4b20      	ldr	r3, [pc, #128]	@ (80011cc <MX_TIM8_Init+0xac>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001150:	4b1e      	ldr	r3, [pc, #120]	@ (80011cc <MX_TIM8_Init+0xac>)
 8001152:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001156:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <MX_TIM8_Init+0xac>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <MX_TIM8_Init+0xac>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001164:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <MX_TIM8_Init+0xac>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800116a:	2301      	movs	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001172:	2301      	movs	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001182:	2301      	movs	r3, #1
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	4619      	mov	r1, r3
 8001194:	480d      	ldr	r0, [pc, #52]	@ (80011cc <MX_TIM8_Init+0xac>)
 8001196:	f002 fadf 	bl	8003758 <HAL_TIM_Encoder_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80011a0:	f000 f904 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a4:	2300      	movs	r3, #0
 80011a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011b0:	463b      	mov	r3, r7
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	@ (80011cc <MX_TIM8_Init+0xac>)
 80011b6:	f003 fad5 	bl	8004764 <HAL_TIMEx_MasterConfigSynchronization>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80011c0:	f000 f8f4 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	3730      	adds	r7, #48	@ 0x30
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200001b8 	.word	0x200001b8
 80011d0:	40010400 	.word	0x40010400

080011d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d8:	4b14      	ldr	r3, [pc, #80]	@ (800122c <MX_USART1_UART_Init+0x58>)
 80011da:	4a15      	ldr	r2, [pc, #84]	@ (8001230 <MX_USART1_UART_Init+0x5c>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011de:	4b13      	ldr	r3, [pc, #76]	@ (800122c <MX_USART1_UART_Init+0x58>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b11      	ldr	r3, [pc, #68]	@ (800122c <MX_USART1_UART_Init+0x58>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <MX_USART1_UART_Init+0x58>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <MX_USART1_UART_Init+0x58>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <MX_USART1_UART_Init+0x58>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <MX_USART1_UART_Init+0x58>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b09      	ldr	r3, [pc, #36]	@ (800122c <MX_USART1_UART_Init+0x58>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <MX_USART1_UART_Init+0x58>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <MX_USART1_UART_Init+0x58>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001216:	4805      	ldr	r0, [pc, #20]	@ (800122c <MX_USART1_UART_Init+0x58>)
 8001218:	f003 fbce 	bl	80049b8 <HAL_UART_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001222:	f000 f8c3 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000204 	.word	0x20000204
 8001230:	40011000 	.word	0x40011000

08001234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	@ 0x28
 8001238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800124a:	4b3e      	ldr	r3, [pc, #248]	@ (8001344 <MX_GPIO_Init+0x110>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a3d      	ldr	r2, [pc, #244]	@ (8001344 <MX_GPIO_Init+0x110>)
 8001250:	f043 0310 	orr.w	r3, r3, #16
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b3b      	ldr	r3, [pc, #236]	@ (8001344 <MX_GPIO_Init+0x110>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b38      	ldr	r3, [pc, #224]	@ (8001344 <MX_GPIO_Init+0x110>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	4a37      	ldr	r2, [pc, #220]	@ (8001344 <MX_GPIO_Init+0x110>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	@ 0x30
 800126e:	4b35      	ldr	r3, [pc, #212]	@ (8001344 <MX_GPIO_Init+0x110>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b32      	ldr	r3, [pc, #200]	@ (8001344 <MX_GPIO_Init+0x110>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a31      	ldr	r2, [pc, #196]	@ (8001344 <MX_GPIO_Init+0x110>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b2f      	ldr	r3, [pc, #188]	@ (8001344 <MX_GPIO_Init+0x110>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001292:	4b2c      	ldr	r3, [pc, #176]	@ (8001344 <MX_GPIO_Init+0x110>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a2b      	ldr	r2, [pc, #172]	@ (8001344 <MX_GPIO_Init+0x110>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b29      	ldr	r3, [pc, #164]	@ (8001344 <MX_GPIO_Init+0x110>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	4b26      	ldr	r3, [pc, #152]	@ (8001344 <MX_GPIO_Init+0x110>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a25      	ldr	r2, [pc, #148]	@ (8001344 <MX_GPIO_Init+0x110>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b23      	ldr	r3, [pc, #140]	@ (8001344 <MX_GPIO_Init+0x110>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2160      	movs	r1, #96	@ 0x60
 80012c6:	4820      	ldr	r0, [pc, #128]	@ (8001348 <MX_GPIO_Init+0x114>)
 80012c8:	f000 ff2a 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80012cc:	2200      	movs	r2, #0
 80012ce:	f240 5107 	movw	r1, #1287	@ 0x507
 80012d2:	481e      	ldr	r0, [pc, #120]	@ (800134c <MX_GPIO_Init+0x118>)
 80012d4:	f000 ff24 	bl	8002120 <HAL_GPIO_WritePin>
                          |LD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80012de:	481c      	ldr	r0, [pc, #112]	@ (8001350 <MX_GPIO_Init+0x11c>)
 80012e0:	f000 ff1e 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012e4:	2360      	movs	r3, #96	@ 0x60
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4813      	ldr	r0, [pc, #76]	@ (8001348 <MX_GPIO_Init+0x114>)
 80012fc:	f000 fd64 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001300:	f240 5307 	movw	r3, #1287	@ 0x507
 8001304:	617b      	str	r3, [r7, #20]
                          |LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001306:	2301      	movs	r3, #1
 8001308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	@ (800134c <MX_GPIO_Init+0x118>)
 800131a:	f000 fd55 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800131e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	4806      	ldr	r0, [pc, #24]	@ (8001350 <MX_GPIO_Init+0x11c>)
 8001338:	f000 fd46 	bl	8001dc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	@ 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	40021000 	.word	0x40021000
 800134c:	40020400 	.word	0x40020400
 8001350:	40020800 	.word	0x40020800

08001354 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800135a:	463b      	mov	r3, r7
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001366:	f000 fc25 	bl	8001bb4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800136a:	2301      	movs	r3, #1
 800136c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800136e:	2300      	movs	r3, #0
 8001370:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001376:	231f      	movs	r3, #31
 8001378:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800137a:	2387      	movs	r3, #135	@ 0x87
 800137c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800137e:	2300      	movs	r3, #0
 8001380:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001382:	2300      	movs	r3, #0
 8001384:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001386:	2301      	movs	r3, #1
 8001388:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800138a:	2301      	movs	r3, #1
 800138c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001396:	463b      	mov	r3, r7
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fc43 	bl	8001c24 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800139e:	2004      	movs	r0, #4
 80013a0:	f000 fc20 	bl	8001be4 <HAL_MPU_Enable>

}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <Error_Handler+0x8>

080013b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <HAL_MspInit+0x44>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	4a0e      	ldr	r2, [pc, #56]	@ (80013fc <HAL_MspInit+0x44>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ca:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <HAL_MspInit+0x44>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <HAL_MspInit+0x44>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013da:	4a08      	ldr	r2, [pc, #32]	@ (80013fc <HAL_MspInit+0x44>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_MspInit+0x44>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a16      	ldr	r2, [pc, #88]	@ (8001468 <HAL_TIM_Base_MspInit+0x68>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d10c      	bne.n	800142c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001412:	4b16      	ldr	r3, [pc, #88]	@ (800146c <HAL_TIM_Base_MspInit+0x6c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	4a15      	ldr	r2, [pc, #84]	@ (800146c <HAL_TIM_Base_MspInit+0x6c>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6453      	str	r3, [r2, #68]	@ 0x44
 800141e:	4b13      	ldr	r3, [pc, #76]	@ (800146c <HAL_TIM_Base_MspInit+0x6c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800142a:	e018      	b.n	800145e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0f      	ldr	r2, [pc, #60]	@ (8001470 <HAL_TIM_Base_MspInit+0x70>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d113      	bne.n	800145e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <HAL_TIM_Base_MspInit+0x6c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	4a0c      	ldr	r2, [pc, #48]	@ (800146c <HAL_TIM_Base_MspInit+0x6c>)
 800143c:	f043 0310 	orr.w	r3, r3, #16
 8001440:	6413      	str	r3, [r2, #64]	@ 0x40
 8001442:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <HAL_TIM_Base_MspInit+0x6c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2036      	movs	r0, #54	@ 0x36
 8001454:	f000 fb77 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001458:	2036      	movs	r0, #54	@ 0x36
 800145a:	f000 fb90 	bl	8001b7e <HAL_NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40010000 	.word	0x40010000
 800146c:	40023800 	.word	0x40023800
 8001470:	40001000 	.word	0x40001000

08001474 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b090      	sub	sp, #64	@ 0x40
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001494:	d144      	bne.n	8001520 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001496:	4b69      	ldr	r3, [pc, #420]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	4a68      	ldr	r2, [pc, #416]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a2:	4b66      	ldr	r3, [pc, #408]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	4b63      	ldr	r3, [pc, #396]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a62      	ldr	r2, [pc, #392]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b60      	ldr	r3, [pc, #384]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	4b5d      	ldr	r3, [pc, #372]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a5c      	ldr	r2, [pc, #368]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b5a      	ldr	r3, [pc, #360]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	623b      	str	r3, [r7, #32]
 80014dc:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014de:	2320      	movs	r3, #32
 80014e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ee:	2301      	movs	r3, #1
 80014f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014f6:	4619      	mov	r1, r3
 80014f8:	4851      	ldr	r0, [pc, #324]	@ (8001640 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80014fa:	f000 fc65 	bl	8001dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014fe:	2308      	movs	r3, #8
 8001500:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800150e:	2301      	movs	r3, #1
 8001510:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001516:	4619      	mov	r1, r3
 8001518:	484a      	ldr	r0, [pc, #296]	@ (8001644 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800151a:	f000 fc55 	bl	8001dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800151e:	e089      	b.n	8001634 <HAL_TIM_Encoder_MspInit+0x1c0>
  else if(htim_encoder->Instance==TIM3)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a48      	ldr	r2, [pc, #288]	@ (8001648 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d128      	bne.n	800157c <HAL_TIM_Encoder_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152a:	4b44      	ldr	r3, [pc, #272]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	4a43      	ldr	r2, [pc, #268]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	6413      	str	r3, [r2, #64]	@ 0x40
 8001536:	4b41      	ldr	r3, [pc, #260]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	4b3e      	ldr	r3, [pc, #248]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a3d      	ldr	r2, [pc, #244]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b3b      	ldr	r3, [pc, #236]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800155a:	2330      	movs	r3, #48	@ 0x30
 800155c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800156a:	2302      	movs	r3, #2
 800156c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001572:	4619      	mov	r1, r3
 8001574:	4833      	ldr	r0, [pc, #204]	@ (8001644 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8001576:	f000 fc27 	bl	8001dc8 <HAL_GPIO_Init>
}
 800157a:	e05b      	b.n	8001634 <HAL_TIM_Encoder_MspInit+0x1c0>
  else if(htim_encoder->Instance==TIM4)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a32      	ldr	r2, [pc, #200]	@ (800164c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d129      	bne.n	80015da <HAL_TIM_Encoder_MspInit+0x166>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001586:	4b2d      	ldr	r3, [pc, #180]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	4a2c      	ldr	r2, [pc, #176]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6413      	str	r3, [r2, #64]	@ 0x40
 8001592:	4b2a      	ldr	r3, [pc, #168]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800159e:	4b27      	ldr	r3, [pc, #156]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a26      	ldr	r2, [pc, #152]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b24      	ldr	r3, [pc, #144]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80015b6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80015ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015c8:	2302      	movs	r3, #2
 80015ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015d0:	4619      	mov	r1, r3
 80015d2:	481f      	ldr	r0, [pc, #124]	@ (8001650 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80015d4:	f000 fbf8 	bl	8001dc8 <HAL_GPIO_Init>
}
 80015d8:	e02c      	b.n	8001634 <HAL_TIM_Encoder_MspInit+0x1c0>
  else if(htim_encoder->Instance==TIM8)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a1d      	ldr	r2, [pc, #116]	@ (8001654 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d127      	bne.n	8001634 <HAL_TIM_Encoder_MspInit+0x1c0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015e4:	4b15      	ldr	r3, [pc, #84]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80015e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e8:	4a14      	ldr	r2, [pc, #80]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80015ea:	f043 0302 	orr.w	r3, r3, #2
 80015ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80015f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001600:	4a0e      	ldr	r2, [pc, #56]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	6313      	str	r3, [r2, #48]	@ 0x30
 8001608:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001614:	23c0      	movs	r3, #192	@ 0xc0
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001624:	2303      	movs	r3, #3
 8001626:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001628:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800162c:	4619      	mov	r1, r3
 800162e:	480a      	ldr	r0, [pc, #40]	@ (8001658 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8001630:	f000 fbca 	bl	8001dc8 <HAL_GPIO_Init>
}
 8001634:	bf00      	nop
 8001636:	3740      	adds	r7, #64	@ 0x40
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800
 8001640:	40020000 	.word	0x40020000
 8001644:	40020400 	.word	0x40020400
 8001648:	40000400 	.word	0x40000400
 800164c:	40000800 	.word	0x40000800
 8001650:	40020c00 	.word	0x40020c00
 8001654:	40010400 	.word	0x40010400
 8001658:	40020800 	.word	0x40020800

0800165c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	@ 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a20      	ldr	r2, [pc, #128]	@ (80016fc <HAL_TIM_MspPostInit+0xa0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d139      	bne.n	80016f2 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800167e:	4b20      	ldr	r3, [pc, #128]	@ (8001700 <HAL_TIM_MspPostInit+0xa4>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a1f      	ldr	r2, [pc, #124]	@ (8001700 <HAL_TIM_MspPostInit+0xa4>)
 8001684:	f043 0310 	orr.w	r3, r3, #16
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b1d      	ldr	r3, [pc, #116]	@ (8001700 <HAL_TIM_MspPostInit+0xa4>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <HAL_TIM_MspPostInit+0xa4>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a19      	ldr	r2, [pc, #100]	@ (8001700 <HAL_TIM_MspPostInit+0xa4>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <HAL_TIM_MspPostInit+0xa4>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4619      	mov	r1, r3
 80016ca:	480e      	ldr	r0, [pc, #56]	@ (8001704 <HAL_TIM_MspPostInit+0xa8>)
 80016cc:	f000 fb7c 	bl	8001dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80016d0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80016d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016e2:	2301      	movs	r3, #1
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	4806      	ldr	r0, [pc, #24]	@ (8001708 <HAL_TIM_MspPostInit+0xac>)
 80016ee:	f000 fb6b 	bl	8001dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016f2:	bf00      	nop
 80016f4:	3728      	adds	r7, #40	@ 0x28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40010000 	.word	0x40010000
 8001700:	40023800 	.word	0x40023800
 8001704:	40021000 	.word	0x40021000
 8001708:	40020000 	.word	0x40020000

0800170c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b0ae      	sub	sp, #184	@ 0xb8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2290      	movs	r2, #144	@ 0x90
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f004 fc2b 	bl	8005f88 <memset>
  if(huart->Instance==USART1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a25      	ldr	r2, [pc, #148]	@ (80017cc <HAL_UART_MspInit+0xc0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d142      	bne.n	80017c2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800173c:	2340      	movs	r3, #64	@ 0x40
 800173e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001740:	2300      	movs	r3, #0
 8001742:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4618      	mov	r0, r3
 800174a:	f001 f9b1 	bl	8002ab0 <HAL_RCCEx_PeriphCLKConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001754:	f7ff fe2a 	bl	80013ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001758:	4b1d      	ldr	r3, [pc, #116]	@ (80017d0 <HAL_UART_MspInit+0xc4>)
 800175a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175c:	4a1c      	ldr	r2, [pc, #112]	@ (80017d0 <HAL_UART_MspInit+0xc4>)
 800175e:	f043 0310 	orr.w	r3, r3, #16
 8001762:	6453      	str	r3, [r2, #68]	@ 0x44
 8001764:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <HAL_UART_MspInit+0xc4>)
 8001766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001770:	4b17      	ldr	r3, [pc, #92]	@ (80017d0 <HAL_UART_MspInit+0xc4>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001774:	4a16      	ldr	r2, [pc, #88]	@ (80017d0 <HAL_UART_MspInit+0xc4>)
 8001776:	f043 0302 	orr.w	r3, r3, #2
 800177a:	6313      	str	r3, [r2, #48]	@ 0x30
 800177c:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <HAL_UART_MspInit+0xc4>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001788:	23c0      	movs	r3, #192	@ 0xc0
 800178a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017a0:	2307      	movs	r3, #7
 80017a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017aa:	4619      	mov	r1, r3
 80017ac:	4809      	ldr	r0, [pc, #36]	@ (80017d4 <HAL_UART_MspInit+0xc8>)
 80017ae:	f000 fb0b 	bl	8001dc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2025      	movs	r0, #37	@ 0x25
 80017b8:	f000 f9c5 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017bc:	2025      	movs	r0, #37	@ 0x25
 80017be:	f000 f9de 	bl	8001b7e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80017c2:	bf00      	nop
 80017c4:	37b8      	adds	r7, #184	@ 0xb8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40011000 	.word	0x40011000
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020400 	.word	0x40020400

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <NMI_Handler+0x4>

080017e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <HardFault_Handler+0x4>

080017e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <MemManage_Handler+0x4>

080017f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <UsageFault_Handler+0x4>

08001800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182e:	f000 f88f 	bl	8001950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <USART1_IRQHandler+0x10>)
 800183e:	f003 f94d 	bl	8004adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000204 	.word	0x20000204

0800184c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <TIM6_DAC_IRQHandler+0x10>)
 8001852:	f002 f8b5 	bl	80039c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000016c 	.word	0x2000016c

08001860 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001864:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <SystemInit+0x20>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800186a:	4a05      	ldr	r2, [pc, #20]	@ (8001880 <SystemInit+0x20>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001884:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001888:	f7ff ffea 	bl	8001860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800188c:	480c      	ldr	r0, [pc, #48]	@ (80018c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800188e:	490d      	ldr	r1, [pc, #52]	@ (80018c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001890:	4a0d      	ldr	r2, [pc, #52]	@ (80018c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018a4:	4c0a      	ldr	r4, [pc, #40]	@ (80018d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018b2:	f004 fb71 	bl	8005f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b6:	f7ff f933 	bl	8000b20 <main>
  bx  lr    
 80018ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018bc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80018c8:	0800603c 	.word	0x0800603c
  ldr r2, =_sbss
 80018cc:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80018d0:	20000388 	.word	0x20000388

080018d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC_IRQHandler>

080018d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018da:	2003      	movs	r0, #3
 80018dc:	f000 f928 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e0:	200f      	movs	r0, #15
 80018e2:	f000 f805 	bl	80018f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e6:	f7ff fd67 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <HAL_InitTick+0x54>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <HAL_InitTick+0x58>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001906:	fbb3 f3f1 	udiv	r3, r3, r1
 800190a:	fbb2 f3f3 	udiv	r3, r2, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f943 	bl	8001b9a <HAL_SYSTICK_Config>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e00e      	b.n	800193c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b0f      	cmp	r3, #15
 8001922:	d80a      	bhi.n	800193a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001924:	2200      	movs	r2, #0
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800192c:	f000 f90b 	bl	8001b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001930:	4a06      	ldr	r2, [pc, #24]	@ (800194c <HAL_InitTick+0x5c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e000      	b.n	800193c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000014 	.word	0x20000014
 8001948:	2000001c 	.word	0x2000001c
 800194c:	20000018 	.word	0x20000018

08001950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_IncTick+0x20>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_IncTick+0x24>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4413      	add	r3, r2
 8001960:	4a04      	ldr	r2, [pc, #16]	@ (8001974 <HAL_IncTick+0x24>)
 8001962:	6013      	str	r3, [r2, #0]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	2000001c 	.word	0x2000001c
 8001974:	20000384 	.word	0x20000384

08001978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return uwTick;
 800197c:	4b03      	ldr	r3, [pc, #12]	@ (800198c <HAL_GetTick+0x14>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000384 	.word	0x20000384

08001990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <__NVIC_SetPriorityGrouping+0x40>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019be:	4a04      	ldr	r2, [pc, #16]	@ (80019d0 <__NVIC_SetPriorityGrouping+0x40>)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	60d3      	str	r3, [r2, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00
 80019d4:	05fa0000 	.word	0x05fa0000

080019d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	@ (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4907      	ldr	r1, [pc, #28]	@ (8001a2c <__NVIC_EnableIRQ+0x38>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	@ (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	@ (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	@ 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
         );
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	@ 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001afc:	d301      	bcc.n	8001b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00f      	b.n	8001b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b02:	4a0a      	ldr	r2, [pc, #40]	@ (8001b2c <SysTick_Config+0x40>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0a:	210f      	movs	r1, #15
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b10:	f7ff ff8e 	bl	8001a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b14:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <SysTick_Config+0x40>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1a:	4b04      	ldr	r3, [pc, #16]	@ (8001b2c <SysTick_Config+0x40>)
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	e000e010 	.word	0xe000e010

08001b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff29 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b58:	f7ff ff3e 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	6978      	ldr	r0, [r7, #20]
 8001b64:	f7ff ff8e 	bl	8001a84 <NVIC_EncodePriority>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff5d 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff31 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffa2 	bl	8001aec <SysTick_Config>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001bb8:	f3bf 8f5f 	dmb	sy
}
 8001bbc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001bbe:	4b07      	ldr	r3, [pc, #28]	@ (8001bdc <HAL_MPU_Disable+0x28>)
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	4a06      	ldr	r2, [pc, #24]	@ (8001bdc <HAL_MPU_Disable+0x28>)
 8001bc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001bca:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <HAL_MPU_Disable+0x2c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	605a      	str	r2, [r3, #4]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00
 8001be0:	e000ed90 	.word	0xe000ed90

08001be4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001bec:	4a0b      	ldr	r2, [pc, #44]	@ (8001c1c <HAL_MPU_Enable+0x38>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <HAL_MPU_Enable+0x3c>)
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfa:	4a09      	ldr	r2, [pc, #36]	@ (8001c20 <HAL_MPU_Enable+0x3c>)
 8001bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c00:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c02:	f3bf 8f4f 	dsb	sy
}
 8001c06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c08:	f3bf 8f6f 	isb	sy
}
 8001c0c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000ed90 	.word	0xe000ed90
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	785a      	ldrb	r2, [r3, #1]
 8001c30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca0 <HAL_MPU_ConfigRegion+0x7c>)
 8001c32:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001c34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <HAL_MPU_ConfigRegion+0x7c>)
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	4a19      	ldr	r2, [pc, #100]	@ (8001ca0 <HAL_MPU_ConfigRegion+0x7c>)
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
 8001c3e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001c40:	4a17      	ldr	r2, [pc, #92]	@ (8001ca0 <HAL_MPU_ConfigRegion+0x7c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	7b1b      	ldrb	r3, [r3, #12]
 8001c4c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7adb      	ldrb	r3, [r3, #11]
 8001c52:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7a9b      	ldrb	r3, [r3, #10]
 8001c5a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7b5b      	ldrb	r3, [r3, #13]
 8001c62:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	7b9b      	ldrb	r3, [r3, #14]
 8001c6a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	7bdb      	ldrb	r3, [r3, #15]
 8001c72:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	7a5b      	ldrb	r3, [r3, #9]
 8001c7a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	7a1b      	ldrb	r3, [r3, #8]
 8001c82:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c84:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	7812      	ldrb	r2, [r2, #0]
 8001c8a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ca0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c8e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c90:	6113      	str	r3, [r2, #16]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed90 	.word	0xe000ed90

08001ca4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cb2:	f7ff fe61 	bl	8001978 <HAL_GetTick>
 8001cb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d008      	beq.n	8001cd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2280      	movs	r2, #128	@ 0x80
 8001cc8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e052      	b.n	8001d7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0216 	bic.w	r2, r2, #22
 8001ce4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cf4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <HAL_DMA_Abort+0x62>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0208 	bic.w	r2, r2, #8
 8001d14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d26:	e013      	b.n	8001d50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d28:	f7ff fe26 	bl	8001978 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b05      	cmp	r3, #5
 8001d34:	d90c      	bls.n	8001d50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2203      	movs	r2, #3
 8001d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e015      	b.n	8001d7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1e4      	bne.n	8001d28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d62:	223f      	movs	r2, #63	@ 0x3f
 8001d64:	409a      	lsls	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d004      	beq.n	8001da2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2280      	movs	r2, #128	@ 0x80
 8001d9c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00c      	b.n	8001dbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2205      	movs	r2, #5
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0201 	bic.w	r2, r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	@ 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	e175      	b.n	80020d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001de8:	2201      	movs	r2, #1
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f040 8164 	bne.w	80020ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d005      	beq.n	8001e1e <HAL_GPIO_Init+0x56>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d130      	bne.n	8001e80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	2203      	movs	r2, #3
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 0201 	and.w	r2, r3, #1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d017      	beq.n	8001ebc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d123      	bne.n	8001f10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	08da      	lsrs	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3208      	adds	r2, #8
 8001ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	220f      	movs	r2, #15
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	08da      	lsrs	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3208      	adds	r2, #8
 8001f0a:	69b9      	ldr	r1, [r7, #24]
 8001f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0203 	and.w	r2, r3, #3
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80be 	beq.w	80020ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f52:	4b66      	ldr	r3, [pc, #408]	@ (80020ec <HAL_GPIO_Init+0x324>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	4a65      	ldr	r2, [pc, #404]	@ (80020ec <HAL_GPIO_Init+0x324>)
 8001f58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f5e:	4b63      	ldr	r3, [pc, #396]	@ (80020ec <HAL_GPIO_Init+0x324>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f6a:	4a61      	ldr	r2, [pc, #388]	@ (80020f0 <HAL_GPIO_Init+0x328>)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	3302      	adds	r3, #2
 8001f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	220f      	movs	r2, #15
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a58      	ldr	r2, [pc, #352]	@ (80020f4 <HAL_GPIO_Init+0x32c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d037      	beq.n	8002006 <HAL_GPIO_Init+0x23e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a57      	ldr	r2, [pc, #348]	@ (80020f8 <HAL_GPIO_Init+0x330>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d031      	beq.n	8002002 <HAL_GPIO_Init+0x23a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a56      	ldr	r2, [pc, #344]	@ (80020fc <HAL_GPIO_Init+0x334>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d02b      	beq.n	8001ffe <HAL_GPIO_Init+0x236>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a55      	ldr	r2, [pc, #340]	@ (8002100 <HAL_GPIO_Init+0x338>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d025      	beq.n	8001ffa <HAL_GPIO_Init+0x232>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a54      	ldr	r2, [pc, #336]	@ (8002104 <HAL_GPIO_Init+0x33c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01f      	beq.n	8001ff6 <HAL_GPIO_Init+0x22e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a53      	ldr	r2, [pc, #332]	@ (8002108 <HAL_GPIO_Init+0x340>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d019      	beq.n	8001ff2 <HAL_GPIO_Init+0x22a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a52      	ldr	r2, [pc, #328]	@ (800210c <HAL_GPIO_Init+0x344>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_GPIO_Init+0x226>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a51      	ldr	r2, [pc, #324]	@ (8002110 <HAL_GPIO_Init+0x348>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00d      	beq.n	8001fea <HAL_GPIO_Init+0x222>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a50      	ldr	r2, [pc, #320]	@ (8002114 <HAL_GPIO_Init+0x34c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d007      	beq.n	8001fe6 <HAL_GPIO_Init+0x21e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4f      	ldr	r2, [pc, #316]	@ (8002118 <HAL_GPIO_Init+0x350>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d101      	bne.n	8001fe2 <HAL_GPIO_Init+0x21a>
 8001fde:	2309      	movs	r3, #9
 8001fe0:	e012      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001fe2:	230a      	movs	r3, #10
 8001fe4:	e010      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001fe6:	2308      	movs	r3, #8
 8001fe8:	e00e      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001fea:	2307      	movs	r3, #7
 8001fec:	e00c      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001fee:	2306      	movs	r3, #6
 8001ff0:	e00a      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	e008      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8002006:	2300      	movs	r3, #0
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002018:	4935      	ldr	r1, [pc, #212]	@ (80020f0 <HAL_GPIO_Init+0x328>)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002026:	4b3d      	ldr	r3, [pc, #244]	@ (800211c <HAL_GPIO_Init+0x354>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800204a:	4a34      	ldr	r2, [pc, #208]	@ (800211c <HAL_GPIO_Init+0x354>)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002050:	4b32      	ldr	r3, [pc, #200]	@ (800211c <HAL_GPIO_Init+0x354>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002074:	4a29      	ldr	r2, [pc, #164]	@ (800211c <HAL_GPIO_Init+0x354>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800207a:	4b28      	ldr	r3, [pc, #160]	@ (800211c <HAL_GPIO_Init+0x354>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800209e:	4a1f      	ldr	r2, [pc, #124]	@ (800211c <HAL_GPIO_Init+0x354>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a4:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <HAL_GPIO_Init+0x354>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c8:	4a14      	ldr	r2, [pc, #80]	@ (800211c <HAL_GPIO_Init+0x354>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3301      	adds	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b0f      	cmp	r3, #15
 80020d8:	f67f ae86 	bls.w	8001de8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3724      	adds	r7, #36	@ 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40013800 	.word	0x40013800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020c00 	.word	0x40020c00
 8002104:	40021000 	.word	0x40021000
 8002108:	40021400 	.word	0x40021400
 800210c:	40021800 	.word	0x40021800
 8002110:	40021c00 	.word	0x40021c00
 8002114:	40022000 	.word	0x40022000
 8002118:	40022400 	.word	0x40022400
 800211c:	40013c00 	.word	0x40013c00

08002120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
 800212c:	4613      	mov	r3, r2
 800212e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002130:	787b      	ldrb	r3, [r7, #1]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800213c:	e003      	b.n	8002146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800213e:	887b      	ldrh	r3, [r7, #2]
 8002140:	041a      	lsls	r2, r3, #16
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	619a      	str	r2, [r3, #24]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002164:	887a      	ldrh	r2, [r7, #2]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4013      	ands	r3, r2
 800216a:	041a      	lsls	r2, r3, #16
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	43d9      	mvns	r1, r3
 8002170:	887b      	ldrh	r3, [r7, #2]
 8002172:	400b      	ands	r3, r1
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	619a      	str	r2, [r3, #24]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002190:	2300      	movs	r3, #0
 8002192:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e29b      	b.n	80026d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8087 	beq.w	80022ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ac:	4b96      	ldr	r3, [pc, #600]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d00c      	beq.n	80021d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b8:	4b93      	ldr	r3, [pc, #588]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d112      	bne.n	80021ea <HAL_RCC_OscConfig+0x62>
 80021c4:	4b90      	ldr	r3, [pc, #576]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021d0:	d10b      	bne.n	80021ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d2:	4b8d      	ldr	r3, [pc, #564]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d06c      	beq.n	80022b8 <HAL_RCC_OscConfig+0x130>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d168      	bne.n	80022b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e275      	b.n	80026d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f2:	d106      	bne.n	8002202 <HAL_RCC_OscConfig+0x7a>
 80021f4:	4b84      	ldr	r3, [pc, #528]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a83      	ldr	r2, [pc, #524]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80021fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	e02e      	b.n	8002260 <HAL_RCC_OscConfig+0xd8>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0x9c>
 800220a:	4b7f      	ldr	r3, [pc, #508]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a7e      	ldr	r2, [pc, #504]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 8002210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	4b7c      	ldr	r3, [pc, #496]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a7b      	ldr	r2, [pc, #492]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 800221c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e01d      	b.n	8002260 <HAL_RCC_OscConfig+0xd8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800222c:	d10c      	bne.n	8002248 <HAL_RCC_OscConfig+0xc0>
 800222e:	4b76      	ldr	r3, [pc, #472]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a75      	ldr	r2, [pc, #468]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 8002234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	4b73      	ldr	r3, [pc, #460]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a72      	ldr	r2, [pc, #456]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 8002240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e00b      	b.n	8002260 <HAL_RCC_OscConfig+0xd8>
 8002248:	4b6f      	ldr	r3, [pc, #444]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a6e      	ldr	r2, [pc, #440]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 800224e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b6c      	ldr	r3, [pc, #432]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a6b      	ldr	r2, [pc, #428]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 800225a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800225e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d013      	beq.n	8002290 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7ff fb86 	bl	8001978 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002270:	f7ff fb82 	bl	8001978 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	@ 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e229      	b.n	80026d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002282:	4b61      	ldr	r3, [pc, #388]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0xe8>
 800228e:	e014      	b.n	80022ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7ff fb72 	bl	8001978 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002298:	f7ff fb6e 	bl	8001978 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	@ 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e215      	b.n	80026d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022aa:	4b57      	ldr	r3, [pc, #348]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x110>
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d069      	beq.n	800239a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022c6:	4b50      	ldr	r3, [pc, #320]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00b      	beq.n	80022ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d11c      	bne.n	8002318 <HAL_RCC_OscConfig+0x190>
 80022de:	4b4a      	ldr	r3, [pc, #296]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d116      	bne.n	8002318 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	4b47      	ldr	r3, [pc, #284]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_RCC_OscConfig+0x17a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e1e9      	b.n	80026d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002302:	4b41      	ldr	r3, [pc, #260]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	493d      	ldr	r1, [pc, #244]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	e040      	b.n	800239a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d023      	beq.n	8002368 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002320:	4b39      	ldr	r3, [pc, #228]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a38      	ldr	r2, [pc, #224]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7ff fb24 	bl	8001978 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002334:	f7ff fb20 	bl	8001978 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e1c7      	b.n	80026d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002346:	4b30      	ldr	r3, [pc, #192]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002352:	4b2d      	ldr	r3, [pc, #180]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4929      	ldr	r1, [pc, #164]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
 8002366:	e018      	b.n	800239a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002368:	4b27      	ldr	r3, [pc, #156]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a26      	ldr	r2, [pc, #152]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7ff fb00 	bl	8001978 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237c:	f7ff fafc 	bl	8001978 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e1a3      	b.n	80026d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	4b1e      	ldr	r3, [pc, #120]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d038      	beq.n	8002418 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d019      	beq.n	80023e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ae:	4b16      	ldr	r3, [pc, #88]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80023b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023b2:	4a15      	ldr	r2, [pc, #84]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7ff fadd 	bl	8001978 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c2:	f7ff fad9 	bl	8001978 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e180      	b.n	80026d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80023d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x23a>
 80023e0:	e01a      	b.n	8002418 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e2:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80023e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e6:	4a08      	ldr	r2, [pc, #32]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ee:	f7ff fac3 	bl	8001978 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f6:	f7ff fabf 	bl	8001978 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d903      	bls.n	800240c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e166      	b.n	80026d6 <HAL_RCC_OscConfig+0x54e>
 8002408:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240c:	4b92      	ldr	r3, [pc, #584]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 800240e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ee      	bne.n	80023f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80a4 	beq.w	800256e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002426:	4b8c      	ldr	r3, [pc, #560]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10d      	bne.n	800244e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	4b89      	ldr	r3, [pc, #548]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	4a88      	ldr	r2, [pc, #544]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800243c:	6413      	str	r3, [r2, #64]	@ 0x40
 800243e:	4b86      	ldr	r3, [pc, #536]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800244e:	4b83      	ldr	r3, [pc, #524]	@ (800265c <HAL_RCC_OscConfig+0x4d4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d118      	bne.n	800248c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800245a:	4b80      	ldr	r3, [pc, #512]	@ (800265c <HAL_RCC_OscConfig+0x4d4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a7f      	ldr	r2, [pc, #508]	@ (800265c <HAL_RCC_OscConfig+0x4d4>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002466:	f7ff fa87 	bl	8001978 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246e:	f7ff fa83 	bl	8001978 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b64      	cmp	r3, #100	@ 0x64
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e12a      	b.n	80026d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002480:	4b76      	ldr	r3, [pc, #472]	@ (800265c <HAL_RCC_OscConfig+0x4d4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x31a>
 8002494:	4b70      	ldr	r3, [pc, #448]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002498:	4a6f      	ldr	r2, [pc, #444]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a0:	e02d      	b.n	80024fe <HAL_RCC_OscConfig+0x376>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x33c>
 80024aa:	4b6b      	ldr	r3, [pc, #428]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ae:	4a6a      	ldr	r2, [pc, #424]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b6:	4b68      	ldr	r3, [pc, #416]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 80024b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ba:	4a67      	ldr	r2, [pc, #412]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 80024bc:	f023 0304 	bic.w	r3, r3, #4
 80024c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80024c2:	e01c      	b.n	80024fe <HAL_RCC_OscConfig+0x376>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	d10c      	bne.n	80024e6 <HAL_RCC_OscConfig+0x35e>
 80024cc:	4b62      	ldr	r3, [pc, #392]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d0:	4a61      	ldr	r2, [pc, #388]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d8:	4b5f      	ldr	r3, [pc, #380]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024dc:	4a5e      	ldr	r2, [pc, #376]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024e4:	e00b      	b.n	80024fe <HAL_RCC_OscConfig+0x376>
 80024e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80024f2:	4b59      	ldr	r3, [pc, #356]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f6:	4a58      	ldr	r2, [pc, #352]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 80024f8:	f023 0304 	bic.w	r3, r3, #4
 80024fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d015      	beq.n	8002532 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7ff fa37 	bl	8001978 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7ff fa33 	bl	8001978 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0d8      	b.n	80026d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002524:	4b4c      	ldr	r3, [pc, #304]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ee      	beq.n	800250e <HAL_RCC_OscConfig+0x386>
 8002530:	e014      	b.n	800255c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7ff fa21 	bl	8001978 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7ff fa1d 	bl	8001978 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0c2      	b.n	80026d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002550:	4b41      	ldr	r3, [pc, #260]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1ee      	bne.n	800253a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d105      	bne.n	800256e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002562:	4b3d      	ldr	r3, [pc, #244]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	4a3c      	ldr	r2, [pc, #240]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800256c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 80ae 	beq.w	80026d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002578:	4b37      	ldr	r3, [pc, #220]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d06d      	beq.n	8002660 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d14b      	bne.n	8002624 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258c:	4b32      	ldr	r3, [pc, #200]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a31      	ldr	r2, [pc, #196]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002592:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7ff f9ee 	bl	8001978 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a0:	f7ff f9ea 	bl	8001978 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e091      	b.n	80026d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b2:	4b29      	ldr	r3, [pc, #164]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69da      	ldr	r2, [r3, #28]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	019b      	lsls	r3, r3, #6
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	3b01      	subs	r3, #1
 80025d8:	041b      	lsls	r3, r3, #16
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e0:	061b      	lsls	r3, r3, #24
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e8:	071b      	lsls	r3, r3, #28
 80025ea:	491b      	ldr	r1, [pc, #108]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f0:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a18      	ldr	r2, [pc, #96]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 80025f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7ff f9bc 	bl	8001978 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002604:	f7ff f9b8 	bl	8001978 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e05f      	b.n	80026d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002616:	4b10      	ldr	r3, [pc, #64]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x47c>
 8002622:	e057      	b.n	80026d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002624:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0b      	ldr	r2, [pc, #44]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 800262a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800262e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7ff f9a2 	bl	8001978 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002638:	f7ff f99e 	bl	8001978 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e045      	b.n	80026d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	4b03      	ldr	r3, [pc, #12]	@ (8002658 <HAL_RCC_OscConfig+0x4d0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x4b0>
 8002656:	e03d      	b.n	80026d4 <HAL_RCC_OscConfig+0x54c>
 8002658:	40023800 	.word	0x40023800
 800265c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002660:	4b1f      	ldr	r3, [pc, #124]	@ (80026e0 <HAL_RCC_OscConfig+0x558>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d030      	beq.n	80026d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d129      	bne.n	80026d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	429a      	cmp	r2, r3
 8002688:	d122      	bne.n	80026d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002690:	4013      	ands	r3, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002696:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002698:	4293      	cmp	r3, r2
 800269a:	d119      	bne.n	80026d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a6:	085b      	lsrs	r3, r3, #1
 80026a8:	3b01      	subs	r3, #1
 80026aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d10f      	bne.n	80026d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d107      	bne.n	80026d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800

080026e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0d0      	b.n	800289e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026fc:	4b6a      	ldr	r3, [pc, #424]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d910      	bls.n	800272c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270a:	4b67      	ldr	r3, [pc, #412]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 020f 	bic.w	r2, r3, #15
 8002712:	4965      	ldr	r1, [pc, #404]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b63      	ldr	r3, [pc, #396]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0b8      	b.n	800289e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002744:	4b59      	ldr	r3, [pc, #356]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a58      	ldr	r2, [pc, #352]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 800274a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800274e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800275c:	4b53      	ldr	r3, [pc, #332]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a52      	ldr	r2, [pc, #328]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 8002762:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002766:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002768:	4b50      	ldr	r3, [pc, #320]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	494d      	ldr	r1, [pc, #308]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d040      	beq.n	8002808 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	4b47      	ldr	r3, [pc, #284]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d115      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e07f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a6:	4b41      	ldr	r3, [pc, #260]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e073      	b.n	800289e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b6:	4b3d      	ldr	r3, [pc, #244]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e06b      	b.n	800289e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c6:	4b39      	ldr	r3, [pc, #228]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f023 0203 	bic.w	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4936      	ldr	r1, [pc, #216]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d8:	f7ff f8ce 	bl	8001978 <HAL_GetTick>
 80027dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e0:	f7ff f8ca 	bl	8001978 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e053      	b.n	800289e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f6:	4b2d      	ldr	r3, [pc, #180]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 020c 	and.w	r2, r3, #12
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	429a      	cmp	r2, r3
 8002806:	d1eb      	bne.n	80027e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002808:	4b27      	ldr	r3, [pc, #156]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d210      	bcs.n	8002838 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b24      	ldr	r3, [pc, #144]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 020f 	bic.w	r2, r3, #15
 800281e:	4922      	ldr	r1, [pc, #136]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b20      	ldr	r3, [pc, #128]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e032      	b.n	800289e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002844:	4b19      	ldr	r3, [pc, #100]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4916      	ldr	r1, [pc, #88]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002862:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	490e      	ldr	r1, [pc, #56]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002876:	f000 f821 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 800287a:	4602      	mov	r2, r0
 800287c:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	490a      	ldr	r1, [pc, #40]	@ (80028b0 <HAL_RCC_ClockConfig+0x1cc>)
 8002888:	5ccb      	ldrb	r3, [r1, r3]
 800288a:	fa22 f303 	lsr.w	r3, r2, r3
 800288e:	4a09      	ldr	r2, [pc, #36]	@ (80028b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002892:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <HAL_RCC_ClockConfig+0x1d4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff f82a 	bl	80018f0 <HAL_InitTick>

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023c00 	.word	0x40023c00
 80028ac:	40023800 	.word	0x40023800
 80028b0:	08006014 	.word	0x08006014
 80028b4:	20000014 	.word	0x20000014
 80028b8:	20000018 	.word	0x20000018

080028bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c0:	b090      	sub	sp, #64	@ 0x40
 80028c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80028c8:	2300      	movs	r3, #0
 80028ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028cc:	2300      	movs	r3, #0
 80028ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028d4:	4b59      	ldr	r3, [pc, #356]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d00d      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x40>
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	f200 80a1 	bhi.w	8002a28 <HAL_RCC_GetSysClockFreq+0x16c>
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x34>
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d003      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ee:	e09b      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f0:	4b53      	ldr	r3, [pc, #332]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x184>)
 80028f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028f4:	e09b      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028f6:	4b53      	ldr	r3, [pc, #332]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x188>)
 80028f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028fa:	e098      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028fc:	4b4f      	ldr	r3, [pc, #316]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002904:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002906:	4b4d      	ldr	r3, [pc, #308]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d028      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002912:	4b4a      	ldr	r3, [pc, #296]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	099b      	lsrs	r3, r3, #6
 8002918:	2200      	movs	r2, #0
 800291a:	623b      	str	r3, [r7, #32]
 800291c:	627a      	str	r2, [r7, #36]	@ 0x24
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002924:	2100      	movs	r1, #0
 8002926:	4b47      	ldr	r3, [pc, #284]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002928:	fb03 f201 	mul.w	r2, r3, r1
 800292c:	2300      	movs	r3, #0
 800292e:	fb00 f303 	mul.w	r3, r0, r3
 8002932:	4413      	add	r3, r2
 8002934:	4a43      	ldr	r2, [pc, #268]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002936:	fba0 1202 	umull	r1, r2, r0, r2
 800293a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800293c:	460a      	mov	r2, r1
 800293e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002942:	4413      	add	r3, r2
 8002944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002948:	2200      	movs	r2, #0
 800294a:	61bb      	str	r3, [r7, #24]
 800294c:	61fa      	str	r2, [r7, #28]
 800294e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002952:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002956:	f7fd fc6f 	bl	8000238 <__aeabi_uldivmod>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4613      	mov	r3, r2
 8002960:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002962:	e053      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002964:	4b35      	ldr	r3, [pc, #212]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	099b      	lsrs	r3, r3, #6
 800296a:	2200      	movs	r2, #0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	617a      	str	r2, [r7, #20]
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002976:	f04f 0b00 	mov.w	fp, #0
 800297a:	4652      	mov	r2, sl
 800297c:	465b      	mov	r3, fp
 800297e:	f04f 0000 	mov.w	r0, #0
 8002982:	f04f 0100 	mov.w	r1, #0
 8002986:	0159      	lsls	r1, r3, #5
 8002988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800298c:	0150      	lsls	r0, r2, #5
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	ebb2 080a 	subs.w	r8, r2, sl
 8002996:	eb63 090b 	sbc.w	r9, r3, fp
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029ae:	ebb2 0408 	subs.w	r4, r2, r8
 80029b2:	eb63 0509 	sbc.w	r5, r3, r9
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	00eb      	lsls	r3, r5, #3
 80029c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029c4:	00e2      	lsls	r2, r4, #3
 80029c6:	4614      	mov	r4, r2
 80029c8:	461d      	mov	r5, r3
 80029ca:	eb14 030a 	adds.w	r3, r4, sl
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	eb45 030b 	adc.w	r3, r5, fp
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029e2:	4629      	mov	r1, r5
 80029e4:	028b      	lsls	r3, r1, #10
 80029e6:	4621      	mov	r1, r4
 80029e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029ec:	4621      	mov	r1, r4
 80029ee:	028a      	lsls	r2, r1, #10
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f6:	2200      	movs	r2, #0
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	60fa      	str	r2, [r7, #12]
 80029fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a00:	f7fd fc1a 	bl	8000238 <__aeabi_uldivmod>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4613      	mov	r3, r2
 8002a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	3301      	adds	r3, #1
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a26:	e002      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3740      	adds	r7, #64	@ 0x40
 8002a34:	46bd      	mov	sp, r7
 8002a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	00f42400 	.word	0x00f42400
 8002a44:	017d7840 	.word	0x017d7840

08002a48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a4c:	4b03      	ldr	r3, [pc, #12]	@ (8002a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000014 	.word	0x20000014

08002a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a64:	f7ff fff0 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	0a9b      	lsrs	r3, r3, #10
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	4903      	ldr	r1, [pc, #12]	@ (8002a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a76:	5ccb      	ldrb	r3, [r1, r3]
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40023800 	.word	0x40023800
 8002a84:	08006024 	.word	0x08006024

08002a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a8c:	f7ff ffdc 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4b05      	ldr	r3, [pc, #20]	@ (8002aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	0b5b      	lsrs	r3, r3, #13
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	4903      	ldr	r1, [pc, #12]	@ (8002aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a9e:	5ccb      	ldrb	r3, [r1, r3]
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	08006024 	.word	0x08006024

08002ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d012      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ad8:	4b69      	ldr	r3, [pc, #420]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a68      	ldr	r2, [pc, #416]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ade:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002ae2:	6093      	str	r3, [r2, #8]
 8002ae4:	4b66      	ldr	r3, [pc, #408]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aec:	4964      	ldr	r1, [pc, #400]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002afa:	2301      	movs	r3, #1
 8002afc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d017      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b10:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b18:	4959      	ldr	r1, [pc, #356]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b28:	d101      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b36:	2301      	movs	r3, #1
 8002b38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d017      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b46:	4b4e      	ldr	r3, [pc, #312]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b4c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	494a      	ldr	r1, [pc, #296]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b64:	d101      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 808b 	beq.w	8002caa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b94:	4b3a      	ldr	r3, [pc, #232]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	4a39      	ldr	r2, [pc, #228]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba0:	4b37      	ldr	r3, [pc, #220]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bac:	4b35      	ldr	r3, [pc, #212]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a34      	ldr	r2, [pc, #208]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb8:	f7fe fede 	bl	8001978 <HAL_GetTick>
 8002bbc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc0:	f7fe feda 	bl	8001978 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	@ 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e38f      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bde:	4b28      	ldr	r3, [pc, #160]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002be6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d035      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d02e      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bfc:	4b20      	ldr	r3, [pc, #128]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c06:	4b1e      	ldr	r3, [pc, #120]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c10:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c12:	4b1b      	ldr	r3, [pc, #108]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c16:	4a1a      	ldr	r2, [pc, #104]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c1c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c1e:	4a18      	ldr	r2, [pc, #96]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c24:	4b16      	ldr	r3, [pc, #88]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d114      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe fea2 	bl	8001978 <HAL_GetTick>
 8002c34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c36:	e00a      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c38:	f7fe fe9e 	bl	8001978 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e351      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0ee      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c66:	d111      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c68:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c74:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c76:	400b      	ands	r3, r1
 8002c78:	4901      	ldr	r1, [pc, #4]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40007000 	.word	0x40007000
 8002c88:	0ffffcff 	.word	0x0ffffcff
 8002c8c:	4bac      	ldr	r3, [pc, #688]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4aab      	ldr	r2, [pc, #684]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c92:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002c96:	6093      	str	r3, [r2, #8]
 8002c98:	4ba9      	ldr	r3, [pc, #676]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca4:	49a6      	ldr	r1, [pc, #664]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0310 	and.w	r3, r3, #16
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d010      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cb6:	4ba2      	ldr	r3, [pc, #648]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cbc:	4aa0      	ldr	r2, [pc, #640]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cc2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002cc6:	4b9e      	ldr	r3, [pc, #632]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd0:	499b      	ldr	r1, [pc, #620]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ce4:	4b96      	ldr	r3, [pc, #600]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cf2:	4993      	ldr	r1, [pc, #588]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d06:	4b8e      	ldr	r3, [pc, #568]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d14:	498a      	ldr	r1, [pc, #552]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d28:	4b85      	ldr	r3, [pc, #532]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d36:	4982      	ldr	r1, [pc, #520]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d4a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d58:	4979      	ldr	r1, [pc, #484]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d6c:	4b74      	ldr	r3, [pc, #464]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d72:	f023 0203 	bic.w	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7a:	4971      	ldr	r1, [pc, #452]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d8e:	4b6c      	ldr	r3, [pc, #432]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d94:	f023 020c 	bic.w	r2, r3, #12
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d9c:	4968      	ldr	r1, [pc, #416]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002db0:	4b63      	ldr	r3, [pc, #396]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dbe:	4960      	ldr	r1, [pc, #384]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de0:	4957      	ldr	r1, [pc, #348]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002df4:	4b52      	ldr	r3, [pc, #328]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e02:	494f      	ldr	r1, [pc, #316]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e16:	4b4a      	ldr	r3, [pc, #296]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e24:	4946      	ldr	r1, [pc, #280]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e38:	4b41      	ldr	r3, [pc, #260]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e3e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e46:	493e      	ldr	r1, [pc, #248]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e5a:	4b39      	ldr	r3, [pc, #228]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e68:	4935      	ldr	r1, [pc, #212]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e7c:	4b30      	ldr	r3, [pc, #192]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e82:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e8a:	492d      	ldr	r1, [pc, #180]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d011      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e9e:	4b28      	ldr	r3, [pc, #160]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eac:	4924      	ldr	r1, [pc, #144]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ede:	4b18      	ldr	r3, [pc, #96]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eec:	4914      	ldr	r1, [pc, #80]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00b      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f00:	4b0f      	ldr	r3, [pc, #60]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f06:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f10:	490b      	ldr	r1, [pc, #44]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00f      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f24:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f34:	4902      	ldr	r1, [pc, #8]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f3c:	e002      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00b      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f50:	4b8a      	ldr	r3, [pc, #552]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f56:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f60:	4986      	ldr	r1, [pc, #536]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00b      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f74:	4b81      	ldr	r3, [pc, #516]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f7a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f84:	497d      	ldr	r1, [pc, #500]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d006      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 80d6 	beq.w	800314c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fa0:	4b76      	ldr	r3, [pc, #472]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a75      	ldr	r2, [pc, #468]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fac:	f7fe fce4 	bl	8001978 <HAL_GetTick>
 8002fb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fb4:	f7fe fce0 	bl	8001978 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	@ 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e195      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fc6:	4b6d      	ldr	r3, [pc, #436]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d021      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d11d      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fe6:	4b65      	ldr	r3, [pc, #404]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fec:	0c1b      	lsrs	r3, r3, #16
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ff4:	4b61      	ldr	r3, [pc, #388]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ffa:	0e1b      	lsrs	r3, r3, #24
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	019a      	lsls	r2, r3, #6
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	041b      	lsls	r3, r3, #16
 800300c:	431a      	orrs	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	061b      	lsls	r3, r3, #24
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	071b      	lsls	r3, r3, #28
 800301a:	4958      	ldr	r1, [pc, #352]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d004      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003032:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003036:	d00a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003040:	2b00      	cmp	r3, #0
 8003042:	d02e      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800304c:	d129      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800304e:	4b4b      	ldr	r3, [pc, #300]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800305c:	4b47      	ldr	r3, [pc, #284]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003062:	0f1b      	lsrs	r3, r3, #28
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	019a      	lsls	r2, r3, #6
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	041b      	lsls	r3, r3, #16
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	061b      	lsls	r3, r3, #24
 800307c:	431a      	orrs	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	071b      	lsls	r3, r3, #28
 8003082:	493e      	ldr	r1, [pc, #248]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800308a:	4b3c      	ldr	r3, [pc, #240]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800308c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003090:	f023 021f 	bic.w	r2, r3, #31
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003098:	3b01      	subs	r3, #1
 800309a:	4938      	ldr	r1, [pc, #224]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d01d      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030ae:	4b33      	ldr	r3, [pc, #204]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030b4:	0e1b      	lsrs	r3, r3, #24
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030bc:	4b2f      	ldr	r3, [pc, #188]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030c2:	0f1b      	lsrs	r3, r3, #28
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	019a      	lsls	r2, r3, #6
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	041b      	lsls	r3, r3, #16
 80030d6:	431a      	orrs	r2, r3
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	061b      	lsls	r3, r3, #24
 80030dc:	431a      	orrs	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	071b      	lsls	r3, r3, #28
 80030e2:	4926      	ldr	r1, [pc, #152]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d011      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	019a      	lsls	r2, r3, #6
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	071b      	lsls	r3, r3, #28
 8003112:	491a      	ldr	r1, [pc, #104]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800311a:	4b18      	ldr	r3, [pc, #96]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a17      	ldr	r2, [pc, #92]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003120:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003126:	f7fe fc27 	bl	8001978 <HAL_GetTick>
 800312a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800312c:	e008      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800312e:	f7fe fc23 	bl	8001978 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b64      	cmp	r3, #100	@ 0x64
 800313a:	d901      	bls.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e0d8      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003140:	4b0e      	ldr	r3, [pc, #56]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2b01      	cmp	r3, #1
 8003150:	f040 80ce 	bne.w	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003154:	4b09      	ldr	r3, [pc, #36]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a08      	ldr	r2, [pc, #32]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800315a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800315e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003160:	f7fe fc0a 	bl	8001978 <HAL_GetTick>
 8003164:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003166:	e00b      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003168:	f7fe fc06 	bl	8001978 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	@ 0x64
 8003174:	d904      	bls.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e0bb      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003180:	4b5e      	ldr	r3, [pc, #376]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003188:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800318c:	d0ec      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d009      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d02e      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d12a      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031b6:	4b51      	ldr	r3, [pc, #324]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031bc:	0c1b      	lsrs	r3, r3, #16
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031c4:	4b4d      	ldr	r3, [pc, #308]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ca:	0f1b      	lsrs	r3, r3, #28
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	019a      	lsls	r2, r3, #6
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	041b      	lsls	r3, r3, #16
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	061b      	lsls	r3, r3, #24
 80031e4:	431a      	orrs	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	071b      	lsls	r3, r3, #28
 80031ea:	4944      	ldr	r1, [pc, #272]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031f2:	4b42      	ldr	r3, [pc, #264]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031f8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003200:	3b01      	subs	r3, #1
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	493d      	ldr	r1, [pc, #244]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d022      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800321c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003220:	d11d      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003222:	4b36      	ldr	r3, [pc, #216]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003228:	0e1b      	lsrs	r3, r3, #24
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003230:	4b32      	ldr	r3, [pc, #200]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003236:	0f1b      	lsrs	r3, r3, #28
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	019a      	lsls	r2, r3, #6
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	041b      	lsls	r3, r3, #16
 800324a:	431a      	orrs	r2, r3
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	061b      	lsls	r3, r3, #24
 8003250:	431a      	orrs	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	071b      	lsls	r3, r3, #28
 8003256:	4929      	ldr	r1, [pc, #164]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d028      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800326a:	4b24      	ldr	r3, [pc, #144]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003270:	0e1b      	lsrs	r3, r3, #24
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003278:	4b20      	ldr	r3, [pc, #128]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800327e:	0c1b      	lsrs	r3, r3, #16
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	019a      	lsls	r2, r3, #6
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	041b      	lsls	r3, r3, #16
 8003290:	431a      	orrs	r2, r3
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	071b      	lsls	r3, r3, #28
 800329e:	4917      	ldr	r1, [pc, #92]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032a6:	4b15      	ldr	r3, [pc, #84]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b4:	4911      	ldr	r1, [pc, #68]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032bc:	4b0f      	ldr	r3, [pc, #60]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0e      	ldr	r2, [pc, #56]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c8:	f7fe fb56 	bl	8001978 <HAL_GetTick>
 80032cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032d0:	f7fe fb52 	bl	8001978 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	@ 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e007      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032e2:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032ee:	d1ef      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3720      	adds	r7, #32
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800

08003300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e049      	b.n	80033a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fe f86a 	bl	8001400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	4619      	mov	r1, r3
 800333e:	4610      	mov	r0, r2
 8003340:	f000 fe4c 	bl	8003fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d001      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e054      	b.n	8003472 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a26      	ldr	r2, [pc, #152]	@ (8003480 <HAL_TIM_Base_Start_IT+0xd0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d022      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x80>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f2:	d01d      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x80>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a22      	ldr	r2, [pc, #136]	@ (8003484 <HAL_TIM_Base_Start_IT+0xd4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d018      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x80>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a21      	ldr	r2, [pc, #132]	@ (8003488 <HAL_TIM_Base_Start_IT+0xd8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d013      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x80>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1f      	ldr	r2, [pc, #124]	@ (800348c <HAL_TIM_Base_Start_IT+0xdc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00e      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x80>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1e      	ldr	r2, [pc, #120]	@ (8003490 <HAL_TIM_Base_Start_IT+0xe0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d009      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x80>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1c      	ldr	r2, [pc, #112]	@ (8003494 <HAL_TIM_Base_Start_IT+0xe4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d004      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x80>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1b      	ldr	r2, [pc, #108]	@ (8003498 <HAL_TIM_Base_Start_IT+0xe8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d115      	bne.n	800345c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	4b19      	ldr	r3, [pc, #100]	@ (800349c <HAL_TIM_Base_Start_IT+0xec>)
 8003438:	4013      	ands	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b06      	cmp	r3, #6
 8003440:	d015      	beq.n	800346e <HAL_TIM_Base_Start_IT+0xbe>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003448:	d011      	beq.n	800346e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0201 	orr.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345a:	e008      	b.n	800346e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e000      	b.n	8003470 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40010000 	.word	0x40010000
 8003484:	40000400 	.word	0x40000400
 8003488:	40000800 	.word	0x40000800
 800348c:	40000c00 	.word	0x40000c00
 8003490:	40010400 	.word	0x40010400
 8003494:	40014000 	.word	0x40014000
 8003498:	40001800 	.word	0x40001800
 800349c:	00010007 	.word	0x00010007

080034a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e049      	b.n	8003546 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f841 	bl	800354e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3304      	adds	r3, #4
 80034dc:	4619      	mov	r1, r3
 80034de:	4610      	mov	r0, r2
 80034e0:	f000 fd7c 	bl	8003fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d109      	bne.n	8003588 <HAL_TIM_PWM_Start+0x24>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e03c      	b.n	8003602 <HAL_TIM_PWM_Start+0x9e>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b04      	cmp	r3, #4
 800358c:	d109      	bne.n	80035a2 <HAL_TIM_PWM_Start+0x3e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b01      	cmp	r3, #1
 8003598:	bf14      	ite	ne
 800359a:	2301      	movne	r3, #1
 800359c:	2300      	moveq	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	e02f      	b.n	8003602 <HAL_TIM_PWM_Start+0x9e>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d109      	bne.n	80035bc <HAL_TIM_PWM_Start+0x58>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	bf14      	ite	ne
 80035b4:	2301      	movne	r3, #1
 80035b6:	2300      	moveq	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	e022      	b.n	8003602 <HAL_TIM_PWM_Start+0x9e>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b0c      	cmp	r3, #12
 80035c0:	d109      	bne.n	80035d6 <HAL_TIM_PWM_Start+0x72>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	bf14      	ite	ne
 80035ce:	2301      	movne	r3, #1
 80035d0:	2300      	moveq	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	e015      	b.n	8003602 <HAL_TIM_PWM_Start+0x9e>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d109      	bne.n	80035f0 <HAL_TIM_PWM_Start+0x8c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	bf14      	ite	ne
 80035e8:	2301      	movne	r3, #1
 80035ea:	2300      	moveq	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	e008      	b.n	8003602 <HAL_TIM_PWM_Start+0x9e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	bf14      	ite	ne
 80035fc:	2301      	movne	r3, #1
 80035fe:	2300      	moveq	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e092      	b.n	8003730 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d104      	bne.n	800361a <HAL_TIM_PWM_Start+0xb6>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003618:	e023      	b.n	8003662 <HAL_TIM_PWM_Start+0xfe>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b04      	cmp	r3, #4
 800361e:	d104      	bne.n	800362a <HAL_TIM_PWM_Start+0xc6>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003628:	e01b      	b.n	8003662 <HAL_TIM_PWM_Start+0xfe>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d104      	bne.n	800363a <HAL_TIM_PWM_Start+0xd6>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003638:	e013      	b.n	8003662 <HAL_TIM_PWM_Start+0xfe>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b0c      	cmp	r3, #12
 800363e:	d104      	bne.n	800364a <HAL_TIM_PWM_Start+0xe6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003648:	e00b      	b.n	8003662 <HAL_TIM_PWM_Start+0xfe>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b10      	cmp	r3, #16
 800364e:	d104      	bne.n	800365a <HAL_TIM_PWM_Start+0xf6>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003658:	e003      	b.n	8003662 <HAL_TIM_PWM_Start+0xfe>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2202      	movs	r2, #2
 800365e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2201      	movs	r2, #1
 8003668:	6839      	ldr	r1, [r7, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f001 f854 	bl	8004718 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a30      	ldr	r2, [pc, #192]	@ (8003738 <HAL_TIM_PWM_Start+0x1d4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <HAL_TIM_PWM_Start+0x120>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2f      	ldr	r2, [pc, #188]	@ (800373c <HAL_TIM_PWM_Start+0x1d8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_TIM_PWM_Start+0x124>
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_TIM_PWM_Start+0x126>
 8003688:	2300      	movs	r3, #0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800369c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a25      	ldr	r2, [pc, #148]	@ (8003738 <HAL_TIM_PWM_Start+0x1d4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d022      	beq.n	80036ee <HAL_TIM_PWM_Start+0x18a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b0:	d01d      	beq.n	80036ee <HAL_TIM_PWM_Start+0x18a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a22      	ldr	r2, [pc, #136]	@ (8003740 <HAL_TIM_PWM_Start+0x1dc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d018      	beq.n	80036ee <HAL_TIM_PWM_Start+0x18a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a20      	ldr	r2, [pc, #128]	@ (8003744 <HAL_TIM_PWM_Start+0x1e0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d013      	beq.n	80036ee <HAL_TIM_PWM_Start+0x18a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003748 <HAL_TIM_PWM_Start+0x1e4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00e      	beq.n	80036ee <HAL_TIM_PWM_Start+0x18a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a19      	ldr	r2, [pc, #100]	@ (800373c <HAL_TIM_PWM_Start+0x1d8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d009      	beq.n	80036ee <HAL_TIM_PWM_Start+0x18a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1b      	ldr	r2, [pc, #108]	@ (800374c <HAL_TIM_PWM_Start+0x1e8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d004      	beq.n	80036ee <HAL_TIM_PWM_Start+0x18a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a19      	ldr	r2, [pc, #100]	@ (8003750 <HAL_TIM_PWM_Start+0x1ec>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d115      	bne.n	800371a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	4b17      	ldr	r3, [pc, #92]	@ (8003754 <HAL_TIM_PWM_Start+0x1f0>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b06      	cmp	r3, #6
 80036fe:	d015      	beq.n	800372c <HAL_TIM_PWM_Start+0x1c8>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003706:	d011      	beq.n	800372c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003718:	e008      	b.n	800372c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0201 	orr.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	e000      	b.n	800372e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40010000 	.word	0x40010000
 800373c:	40010400 	.word	0x40010400
 8003740:	40000400 	.word	0x40000400
 8003744:	40000800 	.word	0x40000800
 8003748:	40000c00 	.word	0x40000c00
 800374c:	40014000 	.word	0x40014000
 8003750:	40001800 	.word	0x40001800
 8003754:	00010007 	.word	0x00010007

08003758 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e08f      	b.n	800388c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7fd fe77 	bl	8001474 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2202      	movs	r2, #2
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6899      	ldr	r1, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4b3e      	ldr	r3, [pc, #248]	@ (8003894 <HAL_TIM_Encoder_Init+0x13c>)
 800379a:	400b      	ands	r3, r1
 800379c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	4619      	mov	r1, r3
 80037a8:	4610      	mov	r0, r2
 80037aa:	f000 fc17 	bl	8003fdc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4b31      	ldr	r3, [pc, #196]	@ (8003898 <HAL_TIM_Encoder_Init+0x140>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	4313      	orrs	r3, r2
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4b2b      	ldr	r3, [pc, #172]	@ (800389c <HAL_TIM_Encoder_Init+0x144>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4b2a      	ldr	r3, [pc, #168]	@ (80038a0 <HAL_TIM_Encoder_Init+0x148>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	4313      	orrs	r3, r2
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	011a      	lsls	r2, r3, #4
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	031b      	lsls	r3, r3, #12
 8003818:	4313      	orrs	r3, r2
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003826:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800382e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	4313      	orrs	r3, r2
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	fffebff8 	.word	0xfffebff8
 8003898:	fffffcfc 	.word	0xfffffcfc
 800389c:	fffff3f3 	.word	0xfffff3f3
 80038a0:	ffff0f0f 	.word	0xffff0f0f

080038a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d110      	bne.n	80038f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d102      	bne.n	80038e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80038da:	7b7b      	ldrb	r3, [r7, #13]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d001      	beq.n	80038e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e069      	b.n	80039b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038f4:	e031      	b.n	800395a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d110      	bne.n	800391e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038fc:	7bbb      	ldrb	r3, [r7, #14]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d102      	bne.n	8003908 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003902:	7b3b      	ldrb	r3, [r7, #12]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d001      	beq.n	800390c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e055      	b.n	80039b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800391c:	e01d      	b.n	800395a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d108      	bne.n	8003936 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003924:	7bbb      	ldrb	r3, [r7, #14]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d105      	bne.n	8003936 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800392a:	7b7b      	ldrb	r3, [r7, #13]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d102      	bne.n	8003936 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003930:	7b3b      	ldrb	r3, [r7, #12]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d001      	beq.n	800393a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e03e      	b.n	80039b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2202      	movs	r2, #2
 800393e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2202      	movs	r2, #2
 8003956:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_TIM_Encoder_Start+0xc4>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2b04      	cmp	r3, #4
 8003964:	d008      	beq.n	8003978 <HAL_TIM_Encoder_Start+0xd4>
 8003966:	e00f      	b.n	8003988 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2201      	movs	r2, #1
 800396e:	2100      	movs	r1, #0
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fed1 	bl	8004718 <TIM_CCxChannelCmd>
      break;
 8003976:	e016      	b.n	80039a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2201      	movs	r2, #1
 800397e:	2104      	movs	r1, #4
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fec9 	bl	8004718 <TIM_CCxChannelCmd>
      break;
 8003986:	e00e      	b.n	80039a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2201      	movs	r2, #1
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fec1 	bl	8004718 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2201      	movs	r2, #1
 800399c:	2104      	movs	r1, #4
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 feba 	bl	8004718 <TIM_CCxChannelCmd>
      break;
 80039a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d020      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01b      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0202 	mvn.w	r2, #2
 80039f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fac8 	bl	8003fa0 <HAL_TIM_IC_CaptureCallback>
 8003a10:	e005      	b.n	8003a1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 faba 	bl	8003f8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 facb 	bl	8003fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d020      	beq.n	8003a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01b      	beq.n	8003a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0204 	mvn.w	r2, #4
 8003a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2202      	movs	r2, #2
 8003a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 faa2 	bl	8003fa0 <HAL_TIM_IC_CaptureCallback>
 8003a5c:	e005      	b.n	8003a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa94 	bl	8003f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 faa5 	bl	8003fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d020      	beq.n	8003abc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01b      	beq.n	8003abc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0208 	mvn.w	r2, #8
 8003a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2204      	movs	r2, #4
 8003a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fa7c 	bl	8003fa0 <HAL_TIM_IC_CaptureCallback>
 8003aa8:	e005      	b.n	8003ab6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fa6e 	bl	8003f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fa7f 	bl	8003fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d020      	beq.n	8003b08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d01b      	beq.n	8003b08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0210 	mvn.w	r2, #16
 8003ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2208      	movs	r2, #8
 8003ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa56 	bl	8003fa0 <HAL_TIM_IC_CaptureCallback>
 8003af4:	e005      	b.n	8003b02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fa48 	bl	8003f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fa59 	bl	8003fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00c      	beq.n	8003b2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d007      	beq.n	8003b2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0201 	mvn.w	r2, #1
 8003b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fc fee2 	bl	80008f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d104      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00c      	beq.n	8003b5a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 ff1b 	bl	8004990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00c      	beq.n	8003b7e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 ff13 	bl	80049a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00c      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 fa13 	bl	8003fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00c      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d007      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f06f 0220 	mvn.w	r2, #32
 8003bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fedb 	bl	800497c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e0ff      	b.n	8003dee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b14      	cmp	r3, #20
 8003bfa:	f200 80f0 	bhi.w	8003dde <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8003c04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c59 	.word	0x08003c59
 8003c08:	08003ddf 	.word	0x08003ddf
 8003c0c:	08003ddf 	.word	0x08003ddf
 8003c10:	08003ddf 	.word	0x08003ddf
 8003c14:	08003c99 	.word	0x08003c99
 8003c18:	08003ddf 	.word	0x08003ddf
 8003c1c:	08003ddf 	.word	0x08003ddf
 8003c20:	08003ddf 	.word	0x08003ddf
 8003c24:	08003cdb 	.word	0x08003cdb
 8003c28:	08003ddf 	.word	0x08003ddf
 8003c2c:	08003ddf 	.word	0x08003ddf
 8003c30:	08003ddf 	.word	0x08003ddf
 8003c34:	08003d1b 	.word	0x08003d1b
 8003c38:	08003ddf 	.word	0x08003ddf
 8003c3c:	08003ddf 	.word	0x08003ddf
 8003c40:	08003ddf 	.word	0x08003ddf
 8003c44:	08003d5d 	.word	0x08003d5d
 8003c48:	08003ddf 	.word	0x08003ddf
 8003c4c:	08003ddf 	.word	0x08003ddf
 8003c50:	08003ddf 	.word	0x08003ddf
 8003c54:	08003d9d 	.word	0x08003d9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fa62 	bl	8004128 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0208 	orr.w	r2, r2, #8
 8003c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699a      	ldr	r2, [r3, #24]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0204 	bic.w	r2, r2, #4
 8003c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6999      	ldr	r1, [r3, #24]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	619a      	str	r2, [r3, #24]
      break;
 8003c96:	e0a5      	b.n	8003de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fab4 	bl	800420c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699a      	ldr	r2, [r3, #24]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6999      	ldr	r1, [r3, #24]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	021a      	lsls	r2, r3, #8
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	619a      	str	r2, [r3, #24]
      break;
 8003cd8:	e084      	b.n	8003de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68b9      	ldr	r1, [r7, #8]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fb0b 	bl	80042fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69da      	ldr	r2, [r3, #28]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0208 	orr.w	r2, r2, #8
 8003cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0204 	bic.w	r2, r2, #4
 8003d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69d9      	ldr	r1, [r3, #28]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	61da      	str	r2, [r3, #28]
      break;
 8003d18:	e064      	b.n	8003de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fb61 	bl	80043e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69d9      	ldr	r1, [r3, #28]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	021a      	lsls	r2, r3, #8
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	61da      	str	r2, [r3, #28]
      break;
 8003d5a:	e043      	b.n	8003de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fb98 	bl	8004498 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0208 	orr.w	r2, r2, #8
 8003d76:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0204 	bic.w	r2, r2, #4
 8003d86:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003d9a:	e023      	b.n	8003de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fbca 	bl	800453c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003db6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dc6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	021a      	lsls	r2, r3, #8
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003ddc:	e002      	b.n	8003de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
      break;
 8003de2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop

08003df8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIM_ConfigClockSource+0x1c>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e0b4      	b.n	8003f7e <HAL_TIM_ConfigClockSource+0x186>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	4b56      	ldr	r3, [pc, #344]	@ (8003f88 <HAL_TIM_ConfigClockSource+0x190>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e4c:	d03e      	beq.n	8003ecc <HAL_TIM_ConfigClockSource+0xd4>
 8003e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e52:	f200 8087 	bhi.w	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e5a:	f000 8086 	beq.w	8003f6a <HAL_TIM_ConfigClockSource+0x172>
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e62:	d87f      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e64:	2b70      	cmp	r3, #112	@ 0x70
 8003e66:	d01a      	beq.n	8003e9e <HAL_TIM_ConfigClockSource+0xa6>
 8003e68:	2b70      	cmp	r3, #112	@ 0x70
 8003e6a:	d87b      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e6c:	2b60      	cmp	r3, #96	@ 0x60
 8003e6e:	d050      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x11a>
 8003e70:	2b60      	cmp	r3, #96	@ 0x60
 8003e72:	d877      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e74:	2b50      	cmp	r3, #80	@ 0x50
 8003e76:	d03c      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0xfa>
 8003e78:	2b50      	cmp	r3, #80	@ 0x50
 8003e7a:	d873      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e7c:	2b40      	cmp	r3, #64	@ 0x40
 8003e7e:	d058      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0x13a>
 8003e80:	2b40      	cmp	r3, #64	@ 0x40
 8003e82:	d86f      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e84:	2b30      	cmp	r3, #48	@ 0x30
 8003e86:	d064      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x15a>
 8003e88:	2b30      	cmp	r3, #48	@ 0x30
 8003e8a:	d86b      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d060      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x15a>
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d867      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d05c      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x15a>
 8003e98:	2b10      	cmp	r3, #16
 8003e9a:	d05a      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x15a>
 8003e9c:	e062      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eae:	f000 fc13 	bl	80046d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ec0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	609a      	str	r2, [r3, #8]
      break;
 8003eca:	e04f      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003edc:	f000 fbfc 	bl	80046d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003eee:	609a      	str	r2, [r3, #8]
      break;
 8003ef0:	e03c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efe:	461a      	mov	r2, r3
 8003f00:	f000 fb70 	bl	80045e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2150      	movs	r1, #80	@ 0x50
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fbc9 	bl	80046a2 <TIM_ITRx_SetConfig>
      break;
 8003f10:	e02c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f000 fb8f 	bl	8004642 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2160      	movs	r1, #96	@ 0x60
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fbb9 	bl	80046a2 <TIM_ITRx_SetConfig>
      break;
 8003f30:	e01c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f000 fb50 	bl	80045e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2140      	movs	r1, #64	@ 0x40
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fba9 	bl	80046a2 <TIM_ITRx_SetConfig>
      break;
 8003f50:	e00c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	f000 fba0 	bl	80046a2 <TIM_ITRx_SetConfig>
      break;
 8003f62:	e003      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
      break;
 8003f68:	e000      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	fffeff88 	.word	0xfffeff88

08003f8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a43      	ldr	r2, [pc, #268]	@ (80040fc <TIM_Base_SetConfig+0x120>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ffa:	d00f      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a40      	ldr	r2, [pc, #256]	@ (8004100 <TIM_Base_SetConfig+0x124>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00b      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a3f      	ldr	r2, [pc, #252]	@ (8004104 <TIM_Base_SetConfig+0x128>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d007      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a3e      	ldr	r2, [pc, #248]	@ (8004108 <TIM_Base_SetConfig+0x12c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d003      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a3d      	ldr	r2, [pc, #244]	@ (800410c <TIM_Base_SetConfig+0x130>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d108      	bne.n	800402e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a32      	ldr	r2, [pc, #200]	@ (80040fc <TIM_Base_SetConfig+0x120>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d02b      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800403c:	d027      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a2f      	ldr	r2, [pc, #188]	@ (8004100 <TIM_Base_SetConfig+0x124>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d023      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a2e      	ldr	r2, [pc, #184]	@ (8004104 <TIM_Base_SetConfig+0x128>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d01f      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a2d      	ldr	r2, [pc, #180]	@ (8004108 <TIM_Base_SetConfig+0x12c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01b      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a2c      	ldr	r2, [pc, #176]	@ (800410c <TIM_Base_SetConfig+0x130>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d017      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2b      	ldr	r2, [pc, #172]	@ (8004110 <TIM_Base_SetConfig+0x134>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a2a      	ldr	r2, [pc, #168]	@ (8004114 <TIM_Base_SetConfig+0x138>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00f      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a29      	ldr	r2, [pc, #164]	@ (8004118 <TIM_Base_SetConfig+0x13c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00b      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a28      	ldr	r2, [pc, #160]	@ (800411c <TIM_Base_SetConfig+0x140>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d007      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a27      	ldr	r2, [pc, #156]	@ (8004120 <TIM_Base_SetConfig+0x144>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d003      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a26      	ldr	r2, [pc, #152]	@ (8004124 <TIM_Base_SetConfig+0x148>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d108      	bne.n	80040a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a0e      	ldr	r2, [pc, #56]	@ (80040fc <TIM_Base_SetConfig+0x120>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d003      	beq.n	80040ce <TIM_Base_SetConfig+0xf2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a10      	ldr	r2, [pc, #64]	@ (800410c <TIM_Base_SetConfig+0x130>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d103      	bne.n	80040d6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f043 0204 	orr.w	r2, r3, #4
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	601a      	str	r2, [r3, #0]
}
 80040ee:	bf00      	nop
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40010000 	.word	0x40010000
 8004100:	40000400 	.word	0x40000400
 8004104:	40000800 	.word	0x40000800
 8004108:	40000c00 	.word	0x40000c00
 800410c:	40010400 	.word	0x40010400
 8004110:	40014000 	.word	0x40014000
 8004114:	40014400 	.word	0x40014400
 8004118:	40014800 	.word	0x40014800
 800411c:	40001800 	.word	0x40001800
 8004120:	40001c00 	.word	0x40001c00
 8004124:	40002000 	.word	0x40002000

08004128 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f023 0201 	bic.w	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4b2b      	ldr	r3, [pc, #172]	@ (8004200 <TIM_OC1_SetConfig+0xd8>)
 8004154:	4013      	ands	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0303 	bic.w	r3, r3, #3
 800415e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f023 0302 	bic.w	r3, r3, #2
 8004170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a21      	ldr	r2, [pc, #132]	@ (8004204 <TIM_OC1_SetConfig+0xdc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_OC1_SetConfig+0x64>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a20      	ldr	r2, [pc, #128]	@ (8004208 <TIM_OC1_SetConfig+0xe0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d10c      	bne.n	80041a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f023 0308 	bic.w	r3, r3, #8
 8004192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 0304 	bic.w	r3, r3, #4
 80041a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a16      	ldr	r2, [pc, #88]	@ (8004204 <TIM_OC1_SetConfig+0xdc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d003      	beq.n	80041b6 <TIM_OC1_SetConfig+0x8e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a15      	ldr	r2, [pc, #84]	@ (8004208 <TIM_OC1_SetConfig+0xe0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d111      	bne.n	80041da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	621a      	str	r2, [r3, #32]
}
 80041f4:	bf00      	nop
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	fffeff8f 	.word	0xfffeff8f
 8004204:	40010000 	.word	0x40010000
 8004208:	40010400 	.word	0x40010400

0800420c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	f023 0210 	bic.w	r2, r3, #16
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4b2e      	ldr	r3, [pc, #184]	@ (80042f0 <TIM_OC2_SetConfig+0xe4>)
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f023 0320 	bic.w	r3, r3, #32
 8004256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a23      	ldr	r2, [pc, #140]	@ (80042f4 <TIM_OC2_SetConfig+0xe8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d003      	beq.n	8004274 <TIM_OC2_SetConfig+0x68>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a22      	ldr	r2, [pc, #136]	@ (80042f8 <TIM_OC2_SetConfig+0xec>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d10d      	bne.n	8004290 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800427a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800428e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a18      	ldr	r2, [pc, #96]	@ (80042f4 <TIM_OC2_SetConfig+0xe8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d003      	beq.n	80042a0 <TIM_OC2_SetConfig+0x94>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a17      	ldr	r2, [pc, #92]	@ (80042f8 <TIM_OC2_SetConfig+0xec>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d113      	bne.n	80042c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	621a      	str	r2, [r3, #32]
}
 80042e2:	bf00      	nop
 80042e4:	371c      	adds	r7, #28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	feff8fff 	.word	0xfeff8fff
 80042f4:	40010000 	.word	0x40010000
 80042f8:	40010400 	.word	0x40010400

080042fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4b2d      	ldr	r3, [pc, #180]	@ (80043dc <TIM_OC3_SetConfig+0xe0>)
 8004328:	4013      	ands	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0303 	bic.w	r3, r3, #3
 8004332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a22      	ldr	r2, [pc, #136]	@ (80043e0 <TIM_OC3_SetConfig+0xe4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d003      	beq.n	8004362 <TIM_OC3_SetConfig+0x66>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a21      	ldr	r2, [pc, #132]	@ (80043e4 <TIM_OC3_SetConfig+0xe8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10d      	bne.n	800437e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004368:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800437c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a17      	ldr	r2, [pc, #92]	@ (80043e0 <TIM_OC3_SetConfig+0xe4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d003      	beq.n	800438e <TIM_OC3_SetConfig+0x92>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a16      	ldr	r2, [pc, #88]	@ (80043e4 <TIM_OC3_SetConfig+0xe8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d113      	bne.n	80043b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800439c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	621a      	str	r2, [r3, #32]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	fffeff8f 	.word	0xfffeff8f
 80043e0:	40010000 	.word	0x40010000
 80043e4:	40010400 	.word	0x40010400

080043e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4b1e      	ldr	r3, [pc, #120]	@ (800448c <TIM_OC4_SetConfig+0xa4>)
 8004414:	4013      	ands	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800441e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004432:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	031b      	lsls	r3, r3, #12
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a13      	ldr	r2, [pc, #76]	@ (8004490 <TIM_OC4_SetConfig+0xa8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d003      	beq.n	8004450 <TIM_OC4_SetConfig+0x68>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a12      	ldr	r2, [pc, #72]	@ (8004494 <TIM_OC4_SetConfig+0xac>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d109      	bne.n	8004464 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004456:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	019b      	lsls	r3, r3, #6
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	621a      	str	r2, [r3, #32]
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	feff8fff 	.word	0xfeff8fff
 8004490:	40010000 	.word	0x40010000
 8004494:	40010400 	.word	0x40010400

08004498 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004530 <TIM_OC5_SetConfig+0x98>)
 80044c4:	4013      	ands	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80044d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	041b      	lsls	r3, r3, #16
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a12      	ldr	r2, [pc, #72]	@ (8004534 <TIM_OC5_SetConfig+0x9c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d003      	beq.n	80044f6 <TIM_OC5_SetConfig+0x5e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a11      	ldr	r2, [pc, #68]	@ (8004538 <TIM_OC5_SetConfig+0xa0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d109      	bne.n	800450a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	621a      	str	r2, [r3, #32]
}
 8004524:	bf00      	nop
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	fffeff8f 	.word	0xfffeff8f
 8004534:	40010000 	.word	0x40010000
 8004538:	40010400 	.word	0x40010400

0800453c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4b1c      	ldr	r3, [pc, #112]	@ (80045d8 <TIM_OC6_SetConfig+0x9c>)
 8004568:	4013      	ands	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800457e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	051b      	lsls	r3, r3, #20
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a13      	ldr	r2, [pc, #76]	@ (80045dc <TIM_OC6_SetConfig+0xa0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d003      	beq.n	800459c <TIM_OC6_SetConfig+0x60>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a12      	ldr	r2, [pc, #72]	@ (80045e0 <TIM_OC6_SetConfig+0xa4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d109      	bne.n	80045b0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	029b      	lsls	r3, r3, #10
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	621a      	str	r2, [r3, #32]
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	feff8fff 	.word	0xfeff8fff
 80045dc:	40010000 	.word	0x40010000
 80045e0:	40010400 	.word	0x40010400

080045e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	f023 0201 	bic.w	r2, r3, #1
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800460e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f023 030a 	bic.w	r3, r3, #10
 8004620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	621a      	str	r2, [r3, #32]
}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004642:	b480      	push	{r7}
 8004644:	b087      	sub	sp, #28
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f023 0210 	bic.w	r2, r3, #16
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800466c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	031b      	lsls	r3, r3, #12
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800467e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	621a      	str	r2, [r3, #32]
}
 8004696:	bf00      	nop
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b085      	sub	sp, #20
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	f043 0307 	orr.w	r3, r3, #7
 80046c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	609a      	str	r2, [r3, #8]
}
 80046cc:	bf00      	nop
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	021a      	lsls	r2, r3, #8
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4313      	orrs	r3, r2
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	609a      	str	r2, [r3, #8]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 031f 	and.w	r3, r3, #31
 800472a:	2201      	movs	r2, #1
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a1a      	ldr	r2, [r3, #32]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	43db      	mvns	r3, r3
 800473a:	401a      	ands	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a1a      	ldr	r2, [r3, #32]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	fa01 f303 	lsl.w	r3, r1, r3
 8004750:	431a      	orrs	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	621a      	str	r2, [r3, #32]
}
 8004756:	bf00      	nop
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
	...

08004764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004778:	2302      	movs	r3, #2
 800477a:	e06d      	b.n	8004858 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a30      	ldr	r2, [pc, #192]	@ (8004864 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d004      	beq.n	80047b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004868 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d108      	bne.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80047b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a20      	ldr	r2, [pc, #128]	@ (8004864 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d022      	beq.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ee:	d01d      	beq.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a1d      	ldr	r2, [pc, #116]	@ (800486c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d018      	beq.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004870 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d013      	beq.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a1a      	ldr	r2, [pc, #104]	@ (8004874 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00e      	beq.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a15      	ldr	r2, [pc, #84]	@ (8004868 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d009      	beq.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a16      	ldr	r2, [pc, #88]	@ (8004878 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d004      	beq.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a15      	ldr	r2, [pc, #84]	@ (800487c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d10c      	bne.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004832:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	4313      	orrs	r3, r2
 800483c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	40010000 	.word	0x40010000
 8004868:	40010400 	.word	0x40010400
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800
 8004874:	40000c00 	.word	0x40000c00
 8004878:	40014000 	.word	0x40014000
 800487c:	40001800 	.word	0x40001800

08004880 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004898:	2302      	movs	r3, #2
 800489a:	e065      	b.n	8004968 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	041b      	lsls	r3, r3, #16
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a16      	ldr	r2, [pc, #88]	@ (8004974 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d004      	beq.n	800492a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a14      	ldr	r2, [pc, #80]	@ (8004978 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d115      	bne.n	8004956 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	051b      	lsls	r3, r3, #20
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	40010000 	.word	0x40010000
 8004978:	40010400 	.word	0x40010400

0800497c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e040      	b.n	8004a4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d106      	bne.n	80049e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fc fe96 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2224      	movs	r2, #36	@ 0x24
 80049e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0201 	bic.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fdfc 	bl	80055fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fb95 	bl	8005134 <UART_SetConfig>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e01b      	b.n	8004a4c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fe7b 	bl	8005740 <UART_CheckIdleState>
 8004a4a:	4603      	mov	r3, r0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08a      	sub	sp, #40	@ 0x28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d132      	bne.n	8004ad2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <HAL_UART_Receive_IT+0x24>
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e02b      	b.n	8004ad4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d018      	beq.n	8004ac2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aae:	623b      	str	r3, [r7, #32]
 8004ab0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	69f9      	ldr	r1, [r7, #28]
 8004ab4:	6a3a      	ldr	r2, [r7, #32]
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	61bb      	str	r3, [r7, #24]
   return(result);
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e6      	bne.n	8004a90 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 ff4f 	bl	800596c <UART_Start_Receive_IT>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	e000      	b.n	8004ad4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004ad2:	2302      	movs	r3, #2
  }
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3728      	adds	r7, #40	@ 0x28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b0ba      	sub	sp, #232	@ 0xe8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004b06:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004b10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d115      	bne.n	8004b44 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00f      	beq.n	8004b44 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d009      	beq.n	8004b44 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 82c6 	beq.w	80050c6 <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	4798      	blx	r3
      }
      return;
 8004b42:	e2c0      	b.n	80050c6 <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8117 	beq.w	8004d7c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004b5e:	4b85      	ldr	r3, [pc, #532]	@ (8004d74 <HAL_UART_IRQHandler+0x298>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 810a 	beq.w	8004d7c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d011      	beq.n	8004b98 <HAL_UART_IRQHandler+0xbc>
 8004b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00b      	beq.n	8004b98 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2201      	movs	r2, #1
 8004b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b8e:	f043 0201 	orr.w	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d011      	beq.n	8004bc8 <HAL_UART_IRQHandler+0xec>
 8004ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00b      	beq.n	8004bc8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bbe:	f043 0204 	orr.w	r2, r3, #4
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d011      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x11c>
 8004bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00b      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2204      	movs	r2, #4
 8004be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bee:	f043 0202 	orr.w	r2, r3, #2
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d017      	beq.n	8004c34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d105      	bne.n	8004c1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00b      	beq.n	8004c34 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2208      	movs	r2, #8
 8004c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c2a:	f043 0208 	orr.w	r2, r3, #8
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d012      	beq.n	8004c66 <HAL_UART_IRQHandler+0x18a>
 8004c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00c      	beq.n	8004c66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c5c:	f043 0220 	orr.w	r2, r3, #32
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 822c 	beq.w	80050ca <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00d      	beq.n	8004c9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d007      	beq.n	8004c9a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ca0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cae:	2b40      	cmp	r3, #64	@ 0x40
 8004cb0:	d005      	beq.n	8004cbe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cb6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d04f      	beq.n	8004d5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 ff1a 	bl	8005af8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cce:	2b40      	cmp	r3, #64	@ 0x40
 8004cd0:	d141      	bne.n	8004d56 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004cfe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004d02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004d0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004d0e:	e841 2300 	strex	r3, r2, [r1]
 8004d12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1d9      	bne.n	8004cd2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d013      	beq.n	8004d4e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d2a:	4a13      	ldr	r2, [pc, #76]	@ (8004d78 <HAL_UART_IRQHandler+0x29c>)
 8004d2c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fd f826 	bl	8001d84 <HAL_DMA_Abort_IT>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d017      	beq.n	8004d6e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004d48:	4610      	mov	r0, r2
 8004d4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4c:	e00f      	b.n	8004d6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f9d0 	bl	80050f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d54:	e00b      	b.n	8004d6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f9cc 	bl	80050f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5c:	e007      	b.n	8004d6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f9c8 	bl	80050f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004d6c:	e1ad      	b.n	80050ca <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d6e:	bf00      	nop
    return;
 8004d70:	e1ab      	b.n	80050ca <HAL_UART_IRQHandler+0x5ee>
 8004d72:	bf00      	nop
 8004d74:	04000120 	.word	0x04000120
 8004d78:	08005bc1 	.word	0x08005bc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	f040 8166 	bne.w	8005052 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d8a:	f003 0310 	and.w	r3, r3, #16
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 815f 	beq.w	8005052 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8158 	beq.w	8005052 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2210      	movs	r2, #16
 8004da8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db4:	2b40      	cmp	r3, #64	@ 0x40
 8004db6:	f040 80d0 	bne.w	8004f5a <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004dc6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 80ab 	beq.w	8004f26 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	f080 80a3 	bcs.w	8004f26 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004de6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004df4:	f000 8086 	beq.w	8004f04 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004e32:	e841 2300 	strex	r3, r2, [r1]
 8004e36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1da      	bne.n	8004df8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3308      	adds	r3, #8
 8004e48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004e52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3308      	adds	r3, #8
 8004e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004e6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e1      	bne.n	8004e42 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3308      	adds	r3, #8
 8004e84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ea2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ea8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004eb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e3      	bne.n	8004e7e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ed4:	f023 0310 	bic.w	r3, r3, #16
 8004ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ee6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ee8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004eec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e4      	bne.n	8004ec4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fc fed0 	bl	8001ca4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f8f2 	bl	8005108 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004f24:	e0d3      	b.n	80050ce <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004f2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f30:	429a      	cmp	r2, r3
 8004f32:	f040 80cc 	bne.w	80050ce <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f40:	f040 80c5 	bne.w	80050ce <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004f50:	4619      	mov	r1, r3
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f8d8 	bl	8005108 <HAL_UARTEx_RxEventCallback>
      return;
 8004f58:	e0b9      	b.n	80050ce <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 80ab 	beq.w	80050d2 <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 8004f7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 80a6 	beq.w	80050d2 <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004faa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e4      	bne.n	8004f86 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	623b      	str	r3, [r7, #32]
   return(result);
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	f023 0301 	bic.w	r3, r3, #1
 8004fd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3308      	adds	r3, #8
 8004fdc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004fe0:	633a      	str	r2, [r7, #48]	@ 0x30
 8004fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fe8:	e841 2300 	strex	r3, r2, [r1]
 8004fec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1e3      	bne.n	8004fbc <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	60fb      	str	r3, [r7, #12]
   return(result);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f023 0310 	bic.w	r3, r3, #16
 800501c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	461a      	mov	r2, r3
 8005026:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800502a:	61fb      	str	r3, [r7, #28]
 800502c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	69b9      	ldr	r1, [r7, #24]
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	617b      	str	r3, [r7, #20]
   return(result);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e4      	bne.n	8005008 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005044:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f85c 	bl	8005108 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005050:	e03f      	b.n	80050d2 <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005056:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00e      	beq.n	800507c <HAL_UART_IRQHandler+0x5a0>
 800505e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d008      	beq.n	800507c <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005072:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f853 	bl	8005120 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800507a:	e02d      	b.n	80050d8 <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800507c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00e      	beq.n	80050a6 <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800508c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01c      	beq.n	80050d6 <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	4798      	blx	r3
    }
    return;
 80050a4:	e017      	b.n	80050d6 <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d012      	beq.n	80050d8 <HAL_UART_IRQHandler+0x5fc>
 80050b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00c      	beq.n	80050d8 <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fd90 	bl	8005be4 <UART_EndTransmit_IT>
    return;
 80050c4:	e008      	b.n	80050d8 <HAL_UART_IRQHandler+0x5fc>
      return;
 80050c6:	bf00      	nop
 80050c8:	e006      	b.n	80050d8 <HAL_UART_IRQHandler+0x5fc>
    return;
 80050ca:	bf00      	nop
 80050cc:	e004      	b.n	80050d8 <HAL_UART_IRQHandler+0x5fc>
      return;
 80050ce:	bf00      	nop
 80050d0:	e002      	b.n	80050d8 <HAL_UART_IRQHandler+0x5fc>
      return;
 80050d2:	bf00      	nop
 80050d4:	e000      	b.n	80050d8 <HAL_UART_IRQHandler+0x5fc>
    return;
 80050d6:	bf00      	nop
  }

}
 80050d8:	37e8      	adds	r7, #232	@ 0xe8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop

080050e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4ba6      	ldr	r3, [pc, #664]	@ (80053f8 <UART_SetConfig+0x2c4>)
 8005160:	4013      	ands	r3, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	6979      	ldr	r1, [r7, #20]
 8005168:	430b      	orrs	r3, r1
 800516a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a94      	ldr	r2, [pc, #592]	@ (80053fc <UART_SetConfig+0x2c8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d120      	bne.n	80051f2 <UART_SetConfig+0xbe>
 80051b0:	4b93      	ldr	r3, [pc, #588]	@ (8005400 <UART_SetConfig+0x2cc>)
 80051b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d816      	bhi.n	80051ec <UART_SetConfig+0xb8>
 80051be:	a201      	add	r2, pc, #4	@ (adr r2, 80051c4 <UART_SetConfig+0x90>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	080051d5 	.word	0x080051d5
 80051c8:	080051e1 	.word	0x080051e1
 80051cc:	080051db 	.word	0x080051db
 80051d0:	080051e7 	.word	0x080051e7
 80051d4:	2301      	movs	r3, #1
 80051d6:	77fb      	strb	r3, [r7, #31]
 80051d8:	e150      	b.n	800547c <UART_SetConfig+0x348>
 80051da:	2302      	movs	r3, #2
 80051dc:	77fb      	strb	r3, [r7, #31]
 80051de:	e14d      	b.n	800547c <UART_SetConfig+0x348>
 80051e0:	2304      	movs	r3, #4
 80051e2:	77fb      	strb	r3, [r7, #31]
 80051e4:	e14a      	b.n	800547c <UART_SetConfig+0x348>
 80051e6:	2308      	movs	r3, #8
 80051e8:	77fb      	strb	r3, [r7, #31]
 80051ea:	e147      	b.n	800547c <UART_SetConfig+0x348>
 80051ec:	2310      	movs	r3, #16
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e144      	b.n	800547c <UART_SetConfig+0x348>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a83      	ldr	r2, [pc, #524]	@ (8005404 <UART_SetConfig+0x2d0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d132      	bne.n	8005262 <UART_SetConfig+0x12e>
 80051fc:	4b80      	ldr	r3, [pc, #512]	@ (8005400 <UART_SetConfig+0x2cc>)
 80051fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005202:	f003 030c 	and.w	r3, r3, #12
 8005206:	2b0c      	cmp	r3, #12
 8005208:	d828      	bhi.n	800525c <UART_SetConfig+0x128>
 800520a:	a201      	add	r2, pc, #4	@ (adr r2, 8005210 <UART_SetConfig+0xdc>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	08005245 	.word	0x08005245
 8005214:	0800525d 	.word	0x0800525d
 8005218:	0800525d 	.word	0x0800525d
 800521c:	0800525d 	.word	0x0800525d
 8005220:	08005251 	.word	0x08005251
 8005224:	0800525d 	.word	0x0800525d
 8005228:	0800525d 	.word	0x0800525d
 800522c:	0800525d 	.word	0x0800525d
 8005230:	0800524b 	.word	0x0800524b
 8005234:	0800525d 	.word	0x0800525d
 8005238:	0800525d 	.word	0x0800525d
 800523c:	0800525d 	.word	0x0800525d
 8005240:	08005257 	.word	0x08005257
 8005244:	2300      	movs	r3, #0
 8005246:	77fb      	strb	r3, [r7, #31]
 8005248:	e118      	b.n	800547c <UART_SetConfig+0x348>
 800524a:	2302      	movs	r3, #2
 800524c:	77fb      	strb	r3, [r7, #31]
 800524e:	e115      	b.n	800547c <UART_SetConfig+0x348>
 8005250:	2304      	movs	r3, #4
 8005252:	77fb      	strb	r3, [r7, #31]
 8005254:	e112      	b.n	800547c <UART_SetConfig+0x348>
 8005256:	2308      	movs	r3, #8
 8005258:	77fb      	strb	r3, [r7, #31]
 800525a:	e10f      	b.n	800547c <UART_SetConfig+0x348>
 800525c:	2310      	movs	r3, #16
 800525e:	77fb      	strb	r3, [r7, #31]
 8005260:	e10c      	b.n	800547c <UART_SetConfig+0x348>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a68      	ldr	r2, [pc, #416]	@ (8005408 <UART_SetConfig+0x2d4>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d120      	bne.n	80052ae <UART_SetConfig+0x17a>
 800526c:	4b64      	ldr	r3, [pc, #400]	@ (8005400 <UART_SetConfig+0x2cc>)
 800526e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005272:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005276:	2b30      	cmp	r3, #48	@ 0x30
 8005278:	d013      	beq.n	80052a2 <UART_SetConfig+0x16e>
 800527a:	2b30      	cmp	r3, #48	@ 0x30
 800527c:	d814      	bhi.n	80052a8 <UART_SetConfig+0x174>
 800527e:	2b20      	cmp	r3, #32
 8005280:	d009      	beq.n	8005296 <UART_SetConfig+0x162>
 8005282:	2b20      	cmp	r3, #32
 8005284:	d810      	bhi.n	80052a8 <UART_SetConfig+0x174>
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <UART_SetConfig+0x15c>
 800528a:	2b10      	cmp	r3, #16
 800528c:	d006      	beq.n	800529c <UART_SetConfig+0x168>
 800528e:	e00b      	b.n	80052a8 <UART_SetConfig+0x174>
 8005290:	2300      	movs	r3, #0
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	e0f2      	b.n	800547c <UART_SetConfig+0x348>
 8005296:	2302      	movs	r3, #2
 8005298:	77fb      	strb	r3, [r7, #31]
 800529a:	e0ef      	b.n	800547c <UART_SetConfig+0x348>
 800529c:	2304      	movs	r3, #4
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	e0ec      	b.n	800547c <UART_SetConfig+0x348>
 80052a2:	2308      	movs	r3, #8
 80052a4:	77fb      	strb	r3, [r7, #31]
 80052a6:	e0e9      	b.n	800547c <UART_SetConfig+0x348>
 80052a8:	2310      	movs	r3, #16
 80052aa:	77fb      	strb	r3, [r7, #31]
 80052ac:	e0e6      	b.n	800547c <UART_SetConfig+0x348>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a56      	ldr	r2, [pc, #344]	@ (800540c <UART_SetConfig+0x2d8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d120      	bne.n	80052fa <UART_SetConfig+0x1c6>
 80052b8:	4b51      	ldr	r3, [pc, #324]	@ (8005400 <UART_SetConfig+0x2cc>)
 80052ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80052c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80052c4:	d013      	beq.n	80052ee <UART_SetConfig+0x1ba>
 80052c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80052c8:	d814      	bhi.n	80052f4 <UART_SetConfig+0x1c0>
 80052ca:	2b80      	cmp	r3, #128	@ 0x80
 80052cc:	d009      	beq.n	80052e2 <UART_SetConfig+0x1ae>
 80052ce:	2b80      	cmp	r3, #128	@ 0x80
 80052d0:	d810      	bhi.n	80052f4 <UART_SetConfig+0x1c0>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <UART_SetConfig+0x1a8>
 80052d6:	2b40      	cmp	r3, #64	@ 0x40
 80052d8:	d006      	beq.n	80052e8 <UART_SetConfig+0x1b4>
 80052da:	e00b      	b.n	80052f4 <UART_SetConfig+0x1c0>
 80052dc:	2300      	movs	r3, #0
 80052de:	77fb      	strb	r3, [r7, #31]
 80052e0:	e0cc      	b.n	800547c <UART_SetConfig+0x348>
 80052e2:	2302      	movs	r3, #2
 80052e4:	77fb      	strb	r3, [r7, #31]
 80052e6:	e0c9      	b.n	800547c <UART_SetConfig+0x348>
 80052e8:	2304      	movs	r3, #4
 80052ea:	77fb      	strb	r3, [r7, #31]
 80052ec:	e0c6      	b.n	800547c <UART_SetConfig+0x348>
 80052ee:	2308      	movs	r3, #8
 80052f0:	77fb      	strb	r3, [r7, #31]
 80052f2:	e0c3      	b.n	800547c <UART_SetConfig+0x348>
 80052f4:	2310      	movs	r3, #16
 80052f6:	77fb      	strb	r3, [r7, #31]
 80052f8:	e0c0      	b.n	800547c <UART_SetConfig+0x348>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a44      	ldr	r2, [pc, #272]	@ (8005410 <UART_SetConfig+0x2dc>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d125      	bne.n	8005350 <UART_SetConfig+0x21c>
 8005304:	4b3e      	ldr	r3, [pc, #248]	@ (8005400 <UART_SetConfig+0x2cc>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800530e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005312:	d017      	beq.n	8005344 <UART_SetConfig+0x210>
 8005314:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005318:	d817      	bhi.n	800534a <UART_SetConfig+0x216>
 800531a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800531e:	d00b      	beq.n	8005338 <UART_SetConfig+0x204>
 8005320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005324:	d811      	bhi.n	800534a <UART_SetConfig+0x216>
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <UART_SetConfig+0x1fe>
 800532a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800532e:	d006      	beq.n	800533e <UART_SetConfig+0x20a>
 8005330:	e00b      	b.n	800534a <UART_SetConfig+0x216>
 8005332:	2300      	movs	r3, #0
 8005334:	77fb      	strb	r3, [r7, #31]
 8005336:	e0a1      	b.n	800547c <UART_SetConfig+0x348>
 8005338:	2302      	movs	r3, #2
 800533a:	77fb      	strb	r3, [r7, #31]
 800533c:	e09e      	b.n	800547c <UART_SetConfig+0x348>
 800533e:	2304      	movs	r3, #4
 8005340:	77fb      	strb	r3, [r7, #31]
 8005342:	e09b      	b.n	800547c <UART_SetConfig+0x348>
 8005344:	2308      	movs	r3, #8
 8005346:	77fb      	strb	r3, [r7, #31]
 8005348:	e098      	b.n	800547c <UART_SetConfig+0x348>
 800534a:	2310      	movs	r3, #16
 800534c:	77fb      	strb	r3, [r7, #31]
 800534e:	e095      	b.n	800547c <UART_SetConfig+0x348>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a2f      	ldr	r2, [pc, #188]	@ (8005414 <UART_SetConfig+0x2e0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d125      	bne.n	80053a6 <UART_SetConfig+0x272>
 800535a:	4b29      	ldr	r3, [pc, #164]	@ (8005400 <UART_SetConfig+0x2cc>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005360:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005364:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005368:	d017      	beq.n	800539a <UART_SetConfig+0x266>
 800536a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800536e:	d817      	bhi.n	80053a0 <UART_SetConfig+0x26c>
 8005370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005374:	d00b      	beq.n	800538e <UART_SetConfig+0x25a>
 8005376:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800537a:	d811      	bhi.n	80053a0 <UART_SetConfig+0x26c>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <UART_SetConfig+0x254>
 8005380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005384:	d006      	beq.n	8005394 <UART_SetConfig+0x260>
 8005386:	e00b      	b.n	80053a0 <UART_SetConfig+0x26c>
 8005388:	2301      	movs	r3, #1
 800538a:	77fb      	strb	r3, [r7, #31]
 800538c:	e076      	b.n	800547c <UART_SetConfig+0x348>
 800538e:	2302      	movs	r3, #2
 8005390:	77fb      	strb	r3, [r7, #31]
 8005392:	e073      	b.n	800547c <UART_SetConfig+0x348>
 8005394:	2304      	movs	r3, #4
 8005396:	77fb      	strb	r3, [r7, #31]
 8005398:	e070      	b.n	800547c <UART_SetConfig+0x348>
 800539a:	2308      	movs	r3, #8
 800539c:	77fb      	strb	r3, [r7, #31]
 800539e:	e06d      	b.n	800547c <UART_SetConfig+0x348>
 80053a0:	2310      	movs	r3, #16
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	e06a      	b.n	800547c <UART_SetConfig+0x348>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005418 <UART_SetConfig+0x2e4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d138      	bne.n	8005422 <UART_SetConfig+0x2ee>
 80053b0:	4b13      	ldr	r3, [pc, #76]	@ (8005400 <UART_SetConfig+0x2cc>)
 80053b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053b6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80053ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053be:	d017      	beq.n	80053f0 <UART_SetConfig+0x2bc>
 80053c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053c4:	d82a      	bhi.n	800541c <UART_SetConfig+0x2e8>
 80053c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053ca:	d00b      	beq.n	80053e4 <UART_SetConfig+0x2b0>
 80053cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053d0:	d824      	bhi.n	800541c <UART_SetConfig+0x2e8>
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <UART_SetConfig+0x2aa>
 80053d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053da:	d006      	beq.n	80053ea <UART_SetConfig+0x2b6>
 80053dc:	e01e      	b.n	800541c <UART_SetConfig+0x2e8>
 80053de:	2300      	movs	r3, #0
 80053e0:	77fb      	strb	r3, [r7, #31]
 80053e2:	e04b      	b.n	800547c <UART_SetConfig+0x348>
 80053e4:	2302      	movs	r3, #2
 80053e6:	77fb      	strb	r3, [r7, #31]
 80053e8:	e048      	b.n	800547c <UART_SetConfig+0x348>
 80053ea:	2304      	movs	r3, #4
 80053ec:	77fb      	strb	r3, [r7, #31]
 80053ee:	e045      	b.n	800547c <UART_SetConfig+0x348>
 80053f0:	2308      	movs	r3, #8
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e042      	b.n	800547c <UART_SetConfig+0x348>
 80053f6:	bf00      	nop
 80053f8:	efff69f3 	.word	0xefff69f3
 80053fc:	40011000 	.word	0x40011000
 8005400:	40023800 	.word	0x40023800
 8005404:	40004400 	.word	0x40004400
 8005408:	40004800 	.word	0x40004800
 800540c:	40004c00 	.word	0x40004c00
 8005410:	40005000 	.word	0x40005000
 8005414:	40011400 	.word	0x40011400
 8005418:	40007800 	.word	0x40007800
 800541c:	2310      	movs	r3, #16
 800541e:	77fb      	strb	r3, [r7, #31]
 8005420:	e02c      	b.n	800547c <UART_SetConfig+0x348>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a72      	ldr	r2, [pc, #456]	@ (80055f0 <UART_SetConfig+0x4bc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d125      	bne.n	8005478 <UART_SetConfig+0x344>
 800542c:	4b71      	ldr	r3, [pc, #452]	@ (80055f4 <UART_SetConfig+0x4c0>)
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005432:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005436:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800543a:	d017      	beq.n	800546c <UART_SetConfig+0x338>
 800543c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005440:	d817      	bhi.n	8005472 <UART_SetConfig+0x33e>
 8005442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005446:	d00b      	beq.n	8005460 <UART_SetConfig+0x32c>
 8005448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800544c:	d811      	bhi.n	8005472 <UART_SetConfig+0x33e>
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <UART_SetConfig+0x326>
 8005452:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005456:	d006      	beq.n	8005466 <UART_SetConfig+0x332>
 8005458:	e00b      	b.n	8005472 <UART_SetConfig+0x33e>
 800545a:	2300      	movs	r3, #0
 800545c:	77fb      	strb	r3, [r7, #31]
 800545e:	e00d      	b.n	800547c <UART_SetConfig+0x348>
 8005460:	2302      	movs	r3, #2
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	e00a      	b.n	800547c <UART_SetConfig+0x348>
 8005466:	2304      	movs	r3, #4
 8005468:	77fb      	strb	r3, [r7, #31]
 800546a:	e007      	b.n	800547c <UART_SetConfig+0x348>
 800546c:	2308      	movs	r3, #8
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e004      	b.n	800547c <UART_SetConfig+0x348>
 8005472:	2310      	movs	r3, #16
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e001      	b.n	800547c <UART_SetConfig+0x348>
 8005478:	2310      	movs	r3, #16
 800547a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005484:	d15b      	bne.n	800553e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005486:	7ffb      	ldrb	r3, [r7, #31]
 8005488:	2b08      	cmp	r3, #8
 800548a:	d828      	bhi.n	80054de <UART_SetConfig+0x3aa>
 800548c:	a201      	add	r2, pc, #4	@ (adr r2, 8005494 <UART_SetConfig+0x360>)
 800548e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005492:	bf00      	nop
 8005494:	080054b9 	.word	0x080054b9
 8005498:	080054c1 	.word	0x080054c1
 800549c:	080054c9 	.word	0x080054c9
 80054a0:	080054df 	.word	0x080054df
 80054a4:	080054cf 	.word	0x080054cf
 80054a8:	080054df 	.word	0x080054df
 80054ac:	080054df 	.word	0x080054df
 80054b0:	080054df 	.word	0x080054df
 80054b4:	080054d7 	.word	0x080054d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b8:	f7fd fad2 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>
 80054bc:	61b8      	str	r0, [r7, #24]
        break;
 80054be:	e013      	b.n	80054e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054c0:	f7fd fae2 	bl	8002a88 <HAL_RCC_GetPCLK2Freq>
 80054c4:	61b8      	str	r0, [r7, #24]
        break;
 80054c6:	e00f      	b.n	80054e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054c8:	4b4b      	ldr	r3, [pc, #300]	@ (80055f8 <UART_SetConfig+0x4c4>)
 80054ca:	61bb      	str	r3, [r7, #24]
        break;
 80054cc:	e00c      	b.n	80054e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ce:	f7fd f9f5 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 80054d2:	61b8      	str	r0, [r7, #24]
        break;
 80054d4:	e008      	b.n	80054e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054da:	61bb      	str	r3, [r7, #24]
        break;
 80054dc:	e004      	b.n	80054e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80054de:	2300      	movs	r3, #0
 80054e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	77bb      	strb	r3, [r7, #30]
        break;
 80054e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d074      	beq.n	80055d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	005a      	lsls	r2, r3, #1
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	085b      	lsrs	r3, r3, #1
 80054f8:	441a      	add	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005502:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	2b0f      	cmp	r3, #15
 8005508:	d916      	bls.n	8005538 <UART_SetConfig+0x404>
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005510:	d212      	bcs.n	8005538 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	b29b      	uxth	r3, r3
 8005516:	f023 030f 	bic.w	r3, r3, #15
 800551a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	085b      	lsrs	r3, r3, #1
 8005520:	b29b      	uxth	r3, r3
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	b29a      	uxth	r2, r3
 8005528:	89fb      	ldrh	r3, [r7, #14]
 800552a:	4313      	orrs	r3, r2
 800552c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	89fa      	ldrh	r2, [r7, #14]
 8005534:	60da      	str	r2, [r3, #12]
 8005536:	e04f      	b.n	80055d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	77bb      	strb	r3, [r7, #30]
 800553c:	e04c      	b.n	80055d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800553e:	7ffb      	ldrb	r3, [r7, #31]
 8005540:	2b08      	cmp	r3, #8
 8005542:	d828      	bhi.n	8005596 <UART_SetConfig+0x462>
 8005544:	a201      	add	r2, pc, #4	@ (adr r2, 800554c <UART_SetConfig+0x418>)
 8005546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554a:	bf00      	nop
 800554c:	08005571 	.word	0x08005571
 8005550:	08005579 	.word	0x08005579
 8005554:	08005581 	.word	0x08005581
 8005558:	08005597 	.word	0x08005597
 800555c:	08005587 	.word	0x08005587
 8005560:	08005597 	.word	0x08005597
 8005564:	08005597 	.word	0x08005597
 8005568:	08005597 	.word	0x08005597
 800556c:	0800558f 	.word	0x0800558f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005570:	f7fd fa76 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>
 8005574:	61b8      	str	r0, [r7, #24]
        break;
 8005576:	e013      	b.n	80055a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005578:	f7fd fa86 	bl	8002a88 <HAL_RCC_GetPCLK2Freq>
 800557c:	61b8      	str	r0, [r7, #24]
        break;
 800557e:	e00f      	b.n	80055a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005580:	4b1d      	ldr	r3, [pc, #116]	@ (80055f8 <UART_SetConfig+0x4c4>)
 8005582:	61bb      	str	r3, [r7, #24]
        break;
 8005584:	e00c      	b.n	80055a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005586:	f7fd f999 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 800558a:	61b8      	str	r0, [r7, #24]
        break;
 800558c:	e008      	b.n	80055a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005592:	61bb      	str	r3, [r7, #24]
        break;
 8005594:	e004      	b.n	80055a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	77bb      	strb	r3, [r7, #30]
        break;
 800559e:	bf00      	nop
    }

    if (pclk != 0U)
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d018      	beq.n	80055d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	085a      	lsrs	r2, r3, #1
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	441a      	add	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b0f      	cmp	r3, #15
 80055be:	d909      	bls.n	80055d4 <UART_SetConfig+0x4a0>
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055c6:	d205      	bcs.n	80055d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	60da      	str	r2, [r3, #12]
 80055d2:	e001      	b.n	80055d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80055e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3720      	adds	r7, #32
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	40007c00 	.word	0x40007c00
 80055f4:	40023800 	.word	0x40023800
 80055f8:	00f42400 	.word	0x00f42400

080055fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01a      	beq.n	8005712 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056fa:	d10a      	bne.n	8005712 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	605a      	str	r2, [r3, #4]
  }
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b098      	sub	sp, #96	@ 0x60
 8005744:	af02      	add	r7, sp, #8
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005750:	f7fc f912 	bl	8001978 <HAL_GetTick>
 8005754:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b08      	cmp	r3, #8
 8005762:	d12e      	bne.n	80057c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005764:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800576c:	2200      	movs	r2, #0
 800576e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f88c 	bl	8005890 <UART_WaitOnFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d021      	beq.n	80057c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800578c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800578e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005792:	653b      	str	r3, [r7, #80]	@ 0x50
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800579c:	647b      	str	r3, [r7, #68]	@ 0x44
 800579e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e6      	bne.n	800577e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e062      	b.n	8005888 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d149      	bne.n	8005864 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057d8:	2200      	movs	r2, #0
 80057da:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f856 	bl	8005890 <UART_WaitOnFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d03c      	beq.n	8005864 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	623b      	str	r3, [r7, #32]
   return(result);
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	461a      	mov	r2, r3
 8005806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005808:	633b      	str	r3, [r7, #48]	@ 0x30
 800580a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800580e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e6      	bne.n	80057ea <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3308      	adds	r3, #8
 8005822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	60fb      	str	r3, [r7, #12]
   return(result);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0301 	bic.w	r3, r3, #1
 8005832:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3308      	adds	r3, #8
 800583a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800583c:	61fa      	str	r2, [r7, #28]
 800583e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	69b9      	ldr	r1, [r7, #24]
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	617b      	str	r3, [r7, #20]
   return(result);
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e5      	bne.n	800581c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e011      	b.n	8005888 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2220      	movs	r2, #32
 800586e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3758      	adds	r7, #88	@ 0x58
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	4613      	mov	r3, r2
 800589e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058a0:	e04f      	b.n	8005942 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058a8:	d04b      	beq.n	8005942 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058aa:	f7fc f865 	bl	8001978 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d302      	bcc.n	80058c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e04e      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d037      	beq.n	8005942 <UART_WaitOnFlagUntilTimeout+0xb2>
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b80      	cmp	r3, #128	@ 0x80
 80058d6:	d034      	beq.n	8005942 <UART_WaitOnFlagUntilTimeout+0xb2>
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b40      	cmp	r3, #64	@ 0x40
 80058dc:	d031      	beq.n	8005942 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d110      	bne.n	800590e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2208      	movs	r2, #8
 80058f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f8ff 	bl	8005af8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2208      	movs	r2, #8
 80058fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e029      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005918:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800591c:	d111      	bne.n	8005942 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005926:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 f8e5 	bl	8005af8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2220      	movs	r2, #32
 8005932:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e00f      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69da      	ldr	r2, [r3, #28]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	4013      	ands	r3, r2
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	429a      	cmp	r2, r3
 8005950:	bf0c      	ite	eq
 8005952:	2301      	moveq	r3, #1
 8005954:	2300      	movne	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	461a      	mov	r2, r3
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	429a      	cmp	r2, r3
 800595e:	d0a0      	beq.n	80058a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800596c:	b480      	push	{r7}
 800596e:	b097      	sub	sp, #92	@ 0x5c
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	4613      	mov	r3, r2
 8005978:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	88fa      	ldrh	r2, [r7, #6]
 8005984:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	88fa      	ldrh	r2, [r7, #6]
 800598c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800599e:	d10e      	bne.n	80059be <UART_Start_Receive_IT+0x52>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d105      	bne.n	80059b4 <UART_Start_Receive_IT+0x48>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80059ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80059b2:	e02d      	b.n	8005a10 <UART_Start_Receive_IT+0xa4>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	22ff      	movs	r2, #255	@ 0xff
 80059b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80059bc:	e028      	b.n	8005a10 <UART_Start_Receive_IT+0xa4>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10d      	bne.n	80059e2 <UART_Start_Receive_IT+0x76>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d104      	bne.n	80059d8 <UART_Start_Receive_IT+0x6c>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	22ff      	movs	r2, #255	@ 0xff
 80059d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80059d6:	e01b      	b.n	8005a10 <UART_Start_Receive_IT+0xa4>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	227f      	movs	r2, #127	@ 0x7f
 80059dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80059e0:	e016      	b.n	8005a10 <UART_Start_Receive_IT+0xa4>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059ea:	d10d      	bne.n	8005a08 <UART_Start_Receive_IT+0x9c>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <UART_Start_Receive_IT+0x92>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	227f      	movs	r2, #127	@ 0x7f
 80059f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80059fc:	e008      	b.n	8005a10 <UART_Start_Receive_IT+0xa4>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	223f      	movs	r2, #63	@ 0x3f
 8005a02:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a06:	e003      	b.n	8005a10 <UART_Start_Receive_IT+0xa4>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2222      	movs	r2, #34	@ 0x22
 8005a1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3308      	adds	r3, #8
 8005a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a32:	f043 0301 	orr.w	r3, r3, #1
 8005a36:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3308      	adds	r3, #8
 8005a3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a40:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005a42:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a44:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a48:	e841 2300 	strex	r3, r2, [r1]
 8005a4c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e5      	bne.n	8005a20 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a5c:	d107      	bne.n	8005a6e <UART_Start_Receive_IT+0x102>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d103      	bne.n	8005a6e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4a21      	ldr	r2, [pc, #132]	@ (8005af0 <UART_Start_Receive_IT+0x184>)
 8005a6a:	669a      	str	r2, [r3, #104]	@ 0x68
 8005a6c:	e002      	b.n	8005a74 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4a20      	ldr	r2, [pc, #128]	@ (8005af4 <UART_Start_Receive_IT+0x188>)
 8005a72:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d019      	beq.n	8005ab0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a9c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005aa0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e6      	bne.n	8005a7c <UART_Start_Receive_IT+0x110>
 8005aae:	e018      	b.n	8005ae2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	613b      	str	r3, [r7, #16]
   return(result);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f043 0320 	orr.w	r3, r3, #32
 8005ac4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ace:	623b      	str	r3, [r7, #32]
 8005ad0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	69f9      	ldr	r1, [r7, #28]
 8005ad4:	6a3a      	ldr	r2, [r7, #32]
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	61bb      	str	r3, [r7, #24]
   return(result);
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e6      	bne.n	8005ab0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	375c      	adds	r7, #92	@ 0x5c
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	08005de1 	.word	0x08005de1
 8005af4:	08005c39 	.word	0x08005c39

08005af8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b095      	sub	sp, #84	@ 0x54
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b20:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b26:	e841 2300 	strex	r3, r2, [r1]
 8005b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1e6      	bne.n	8005b00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3308      	adds	r3, #8
 8005b38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3308      	adds	r3, #8
 8005b50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e5      	bne.n	8005b32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d118      	bne.n	8005ba0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f023 0310 	bic.w	r3, r3, #16
 8005b82:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b8c:	61bb      	str	r3, [r7, #24]
 8005b8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6979      	ldr	r1, [r7, #20]
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	613b      	str	r3, [r7, #16]
   return(result);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e6      	bne.n	8005b6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005bb4:	bf00      	nop
 8005bb6:	3754      	adds	r7, #84	@ 0x54
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f7ff fa8c 	bl	80050f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bdc:	bf00      	nop
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b088      	sub	sp, #32
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c00:	61fb      	str	r3, [r7, #28]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	61bb      	str	r3, [r7, #24]
 8005c0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	6979      	ldr	r1, [r7, #20]
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	613b      	str	r3, [r7, #16]
   return(result);
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e6      	bne.n	8005bec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7ff fa58 	bl	80050e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c30:	bf00      	nop
 8005c32:	3720      	adds	r7, #32
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b09c      	sub	sp, #112	@ 0x70
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c46:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c50:	2b22      	cmp	r3, #34	@ 0x22
 8005c52:	f040 80b9 	bne.w	8005dc8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c64:	b2d9      	uxtb	r1, r3
 8005c66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c70:	400a      	ands	r2, r1
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f040 809c 	bne.w	8005dd8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca8:	e853 3f00 	ldrex	r3, [r3]
 8005cac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e6      	bne.n	8005ca0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cdc:	e853 3f00 	ldrex	r3, [r3]
 8005ce0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ce4:	f023 0301 	bic.w	r3, r3, #1
 8005ce8:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3308      	adds	r3, #8
 8005cf0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005cf2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005cf4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1e5      	bne.n	8005cd2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d018      	beq.n	8005d5a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	e853 3f00 	ldrex	r3, [r3]
 8005d34:	623b      	str	r3, [r7, #32]
   return(result);
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d46:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d4e:	e841 2300 	strex	r3, r2, [r1]
 8005d52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1e6      	bne.n	8005d28 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d12e      	bne.n	8005dc0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	e853 3f00 	ldrex	r3, [r3]
 8005d74:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f023 0310 	bic.w	r3, r3, #16
 8005d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8a:	69b9      	ldr	r1, [r7, #24]
 8005d8c:	69fa      	ldr	r2, [r7, #28]
 8005d8e:	e841 2300 	strex	r3, r2, [r1]
 8005d92:	617b      	str	r3, [r7, #20]
   return(result);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1e6      	bne.n	8005d68 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	2b10      	cmp	r3, #16
 8005da6:	d103      	bne.n	8005db0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2210      	movs	r2, #16
 8005dae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005db6:	4619      	mov	r1, r3
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7ff f9a5 	bl	8005108 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005dbe:	e00b      	b.n	8005dd8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7fa fbb1 	bl	8000528 <HAL_UART_RxCpltCallback>
}
 8005dc6:	e007      	b.n	8005dd8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0208 	orr.w	r2, r2, #8
 8005dd6:	619a      	str	r2, [r3, #24]
}
 8005dd8:	bf00      	nop
 8005dda:	3770      	adds	r7, #112	@ 0x70
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b09c      	sub	sp, #112	@ 0x70
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005dee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005df8:	2b22      	cmp	r3, #34	@ 0x22
 8005dfa:	f040 80b9 	bne.w	8005f70 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005e0e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005e12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005e16:	4013      	ands	r3, r2
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e22:	1c9a      	adds	r2, r3, #2
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f040 809c 	bne.w	8005f80 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005e56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e66:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e68:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e6      	bne.n	8005e48 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3308      	adds	r3, #8
 8005e80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8c:	f023 0301 	bic.w	r3, r3, #1
 8005e90:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3308      	adds	r3, #8
 8005e98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005e9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ea0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e5      	bne.n	8005e7a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d018      	beq.n	8005f02 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ef0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e6      	bne.n	8005ed0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d12e      	bne.n	8005f68 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	e853 3f00 	ldrex	r3, [r3]
 8005f1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f023 0310 	bic.w	r3, r3, #16
 8005f24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f2e:	61bb      	str	r3, [r7, #24]
 8005f30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	6979      	ldr	r1, [r7, #20]
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e6      	bne.n	8005f10 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	2b10      	cmp	r3, #16
 8005f4e:	d103      	bne.n	8005f58 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2210      	movs	r2, #16
 8005f56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7ff f8d1 	bl	8005108 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f66:	e00b      	b.n	8005f80 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7fa fadd 	bl	8000528 <HAL_UART_RxCpltCallback>
}
 8005f6e:	e007      	b.n	8005f80 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0208 	orr.w	r2, r2, #8
 8005f7e:	619a      	str	r2, [r3, #24]
}
 8005f80:	bf00      	nop
 8005f82:	3770      	adds	r7, #112	@ 0x70
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <memset>:
 8005f88:	4402      	add	r2, r0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d100      	bne.n	8005f92 <memset+0xa>
 8005f90:	4770      	bx	lr
 8005f92:	f803 1b01 	strb.w	r1, [r3], #1
 8005f96:	e7f9      	b.n	8005f8c <memset+0x4>

08005f98 <__libc_init_array>:
 8005f98:	b570      	push	{r4, r5, r6, lr}
 8005f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8005fd0 <__libc_init_array+0x38>)
 8005f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8005fd4 <__libc_init_array+0x3c>)
 8005f9e:	1b64      	subs	r4, r4, r5
 8005fa0:	10a4      	asrs	r4, r4, #2
 8005fa2:	2600      	movs	r6, #0
 8005fa4:	42a6      	cmp	r6, r4
 8005fa6:	d109      	bne.n	8005fbc <__libc_init_array+0x24>
 8005fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8005fd8 <__libc_init_array+0x40>)
 8005faa:	4c0c      	ldr	r4, [pc, #48]	@ (8005fdc <__libc_init_array+0x44>)
 8005fac:	f000 f826 	bl	8005ffc <_init>
 8005fb0:	1b64      	subs	r4, r4, r5
 8005fb2:	10a4      	asrs	r4, r4, #2
 8005fb4:	2600      	movs	r6, #0
 8005fb6:	42a6      	cmp	r6, r4
 8005fb8:	d105      	bne.n	8005fc6 <__libc_init_array+0x2e>
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc0:	4798      	blx	r3
 8005fc2:	3601      	adds	r6, #1
 8005fc4:	e7ee      	b.n	8005fa4 <__libc_init_array+0xc>
 8005fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fca:	4798      	blx	r3
 8005fcc:	3601      	adds	r6, #1
 8005fce:	e7f2      	b.n	8005fb6 <__libc_init_array+0x1e>
 8005fd0:	08006034 	.word	0x08006034
 8005fd4:	08006034 	.word	0x08006034
 8005fd8:	08006034 	.word	0x08006034
 8005fdc:	08006038 	.word	0x08006038

08005fe0 <memcpy>:
 8005fe0:	440a      	add	r2, r1
 8005fe2:	4291      	cmp	r1, r2
 8005fe4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005fe8:	d100      	bne.n	8005fec <memcpy+0xc>
 8005fea:	4770      	bx	lr
 8005fec:	b510      	push	{r4, lr}
 8005fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ff6:	4291      	cmp	r1, r2
 8005ff8:	d1f9      	bne.n	8005fee <memcpy+0xe>
 8005ffa:	bd10      	pop	{r4, pc}

08005ffc <_init>:
 8005ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffe:	bf00      	nop
 8006000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006002:	bc08      	pop	{r3}
 8006004:	469e      	mov	lr, r3
 8006006:	4770      	bx	lr

08006008 <_fini>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	bf00      	nop
 800600c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600e:	bc08      	pop	{r3}
 8006010:	469e      	mov	lr, r3
 8006012:	4770      	bx	lr
